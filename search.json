[{"title":"搜索功能完成","url":"/posts/搜索功能完成.html","content":"经过一系列努力（大约两个小时吧），我终于完成了博客的搜索功能（不过性能还值得切磋）。\n总归是件好事，毕竟功能稀缺的本站能朝完善更进一步，我还是很高兴的。\nSoy Juice’s Search Engine\n","title_tokenize":["搜索","功能","完成"],"content_tokenize":["一系列","努力","大约","两个","小时","终究","完成","博客","搜索","功能","性能","还","值得","商讨","总归","件","好事","毕竟","功能","稀缺","本站","完善","更进一步","很","高兴","Soy","Juice","s","Search","Engine"]},{"title":"Vijos P1037 构建双塔","url":"/posts/Vijos-p1037-双塔构建.html","content":"描述2001年9月11日，一场突发的灾难将纽约世界贸易中心大厦夷为平地，Mr.F曾亲眼目睹了这次灾难。为了纪念“9?11”事件，Mr. F决定自己用水晶来搭建一座双塔。Mr. F有N块水晶，每块水晶有一个高度，他想用这N块水晶搭建两座有同样高度的塔，使他们成为一座双塔，Mr. F可以从这N块水晶中任取M（1≤M≤N）块来搭建。但是他不知道能否使两座塔有同样的高度，也不知道如果能搭建成一座双塔，这座双塔的最大高度是多少。所以他来请你帮忙。给定水晶的数量N（1≤N≤100）和每块水晶的高度Hi（N块水晶高度的总和不超过2000），你的任务是判断Mr. F能否用这些水晶搭建成一座双塔（两座塔有同样的高度），如果能，则输出所能搭建的双塔的最大高度，否则输出“Impossible”。\n格式输入格式输入的第一行为一个数N，表示水晶的数量。第二行为N个数，第i个数表示第i个水晶的高度。\n输出格式输出仅包含一行，如果能搭成一座双塔，则输出双塔的最大高度，否则输出一个字符串“Impossible”。\n样例1样例输入151 3 4 5 2\n样例输出17\n来源某校NOIP模拟题\n分析题目分析：数据太水，暴力。\n算法分析：暴力。\n数据分析：太水。\n代码分析：\n\n#include&lt;cstdio>  \nusing namespace std;  \n\nbool inq[N][N];  \nint u,n,sum,x;  \n\nint main()   \n{  \n    scanf(\"%d\",&amp;n);  \n    inq[0][0]=1;  \n    for(int k=0;k&lt;n;k++)   \n    {  \n        scanf(\"%d\",&amp;x);  \n        for(int i=sum;i>-1;i--)  \n        for(int j=i;j>-1;j--)  \n        if(inq[i][j])   \n        {  \n            if(j+x&lt;=i) inq[i][j+x]=1;  \n            else inq[j+x][i]=1;  \n            inq[i+x][j]=1;  \n        }  \n        sum+=x;  \n    }  \n    for(int i=sum;i>0;i--) if(inq[i][i])   \n    {   \n        printf(\"%d\\n\",i);   \n        return 0;  \n    }  \n    puts(\"Impossible\");  \n    return 0;  \n}\n\n\n无。\n。。。。。。。\n好吧，标签暴露一切，本题还有动归解法。\n分析2题目分析：从题目看似乎一下子想不到正解，这恰恰就证明了此题是动归。（滑稽\n算法分析：动态规划，一看便是背包方面的问题，每一块水晶只有不取，放高塔或放低塔三种状态：1.f[i][j]表示前i块水晶，高度差为j时，较矮的塔的高度，sum[i]表示前缀和2.对于第i块水晶有四种操作：加在高塔上；加在低塔上，但仍为低塔；加在低塔上，成为高塔；不放这块水晶。3.f[i][j]从f[i-1][h]推来，就要从以上四种情况中确定h4.把f[i][j]初始化为负数，因为要保证f[i-1][h]这种情况是存在的，sum[]也是为了保证情况存在。\n数据分析：太水，在动归面前显得更水了。\n代码分析：\n\n#include&lt;bits/stdc++.h>\nusing namespace std;\n\nconst int up=300;\nint N;\nint a[300],sum[300];\nint f[300][2500];\n\nint main()\n{\n    memset(f,-0x7f,sizeof f);\n    cin>>N;\n    for(int i=1;i&lt;=N;i++) cin>>a[i];\n    sort(a+1,a+N+1);\n    for(int i=1;i&lt;=N;i++) sum[i]=sum[i-1]+a[i];\n    f[1][0]=0;f[1][a[1]]=0;\n    for(int i=2;i&lt;=N;i++)\n    {\n        for(int j=0;j&lt;=sum[i];j++)\n        {\n            int h1=j-a[i];\n            if(h1>=0&amp;&amp;h1&lt;=sum[i-1]) f[i][j]=max(f[i][j],f[i-1][h1]);\n\n            int h2=j+a[i];\n            if(h2&lt;=sum[i-1]) f[i][j]=max(f[i][j],f[i-1][h2]+a[i]);\n\n            int h3=a[i]-j;\n            if(h3>=0&amp;&amp;h3&lt;=sum[i-1]) f[i][j]=max(f[i][j],f[i-1][h3]+h3);\n\n            int h4=j;\n            if(h4&lt;=sum[i-1]) f[i][j]=max(f[i][j],f[i-1][j]);\n        }\n    }\n    if(f[N][0]&lt;=0)\n    {\n        cout&lt;&lt;\"Impossible\";\n        return 0;\n    }\n    cout&lt;&lt;f[N][0];\n    return 0;\n}\n\n\n做这道题总是让我想起逝去的青春，那一个夜晚，写下金明的预算方案时，那激动而又不满足的心情，错误时一遍又一遍纠错。\n想必每一次AC都是珍贵的回忆吧。\n","title_tokenize":["Vijos","P","1037","构建","双塔"],"content_tokenize":["描写","2001年9月11日","一场","突发","灾害","纽约","世界贸易中心","大厦","夷为平地","Mr","F","曾","亲眼","目击","这次","灾害","记念","9","11","事件","Mr","F","决定","水晶","搭建","1","座双塔","Mr","F","N","块","水晶","块","水晶","高度","想用这","N","块","水晶","搭建","两","座","高度","塔","使","成为","1","座双塔","Mr","F","N","块","水晶","中","任取","M","1","M","N","块","搭建","不知道","能否","使","两","座塔","高度","也不","知道","搭建","成","1","座双塔","这座双塔","最大","高度","是多少","请你","帮忙","给定","水晶","数量","N","1","N","100","块","水晶","高度","Hi","N","块","水晶","高度","总和","不超过","2000","任务","判断","Mr","F","能否","水晶","搭建","成","1","座双塔","两","座塔","高度","输出","搭建","双塔","最大","高度","输出","Impossible","格式","输入","格式","输入","第一","行动","1","个数","N","表示","水晶","数量","行动","N","个数","i","个数","表示","i","水晶","高度","输出","格式","输出","仅","包括","一行","搭成","1","座双塔","输出","双塔","最大","高度","输出","字符串","Impossible","样例","1","样例","输入","151","3","4","5","2","样例","输出","17","来源","某校","NOIP","摹拟","题","分析","题目","分析","数据","太","水","暴力","算法","分析","暴力","数据","分析","太","水","代码","分析","include","lt","cstdio","using","namespace","std","bool","inq","N","N","int","u","n","sum","x","int","main","scanf","d","amp","n","inq","0","0","1","for","int","k","0","k","lt","n","k","scanf","d","amp","x","for","int","i","sum","i","1","i","for","int","j","i","j","1","j","if","inq","i","j","if","j","x","lt","i","inq","i","j","x","1","else","inq","j","x","i","1","inq","i","x","j","1","sum","x","for","int","i","sum","i","0","i","if","inq","i","i","printf","d","n","i","return","0","puts","Impossible","return","0","无","好吧","标签","暴露","本题","动","解法","分析","2","题目","分析","题目","看","恍如","一下子","想不到","正解","恰恰","证明","题","动","滑稽","算法","分析","动态","计划","一看","便是","背包","方面","问题","每一块","水晶","不","取","放","高塔","放低","塔","三种","状态","1","f","i","j","表示","前","i","块","水晶","高度","差","j","时","矮","塔","高度","sum","i","表示","前缀","2","i","块","水晶","四种","操作","加","高塔","上","加","低","塔","上","仍","低","塔","加","低","塔","上","成","高塔","不","放","块","水晶","3","f","i","j","f","i","1","h","推","就要","以上","四种","情况","中","肯定","h","4","f","i","j","初始","化为","负数","保证","f","i","1","h","这种情况","存在","sum","也是","保证","情况","存在","数据","分析","太","水","动","眼前","显得","更","水","代码","分析","include","lt","bits","std","c++","h","using","namespace","std","const","int","up","300","int","N","int","a","300","sum","300","int","f","300","2500","int","main","memset","f","0","x","7","f","sizeof","f","cin","N","for","int","i","1","i","lt","N","i","cin","a","i","sort","a","1","a","N","1","for","int","i","1","i","lt","N","i","sum","i","sum","i","1","a","i","f","1","0","0","f","1","a","1","0","for","int","i","2","i","lt","N","i","for","int","j","0","j","lt","sum","i","j","int","h","1","j","a","i","if","h","1","0","amp","amp","h","1","lt","sum","i","1","f","i","j","max","f","i","j","f","i","1","h","1","int","h","2","j","a","i","if","h","2","lt","sum","i","1","f","i","j","max","f","i","j","f","i","1","h","2","a","i","int","h","3","a","i","j","if","h","3","0","amp","amp","h","3","lt","sum","i","1","f","i","j","max","f","i","j","f","i","1","h","3","h","3","int","h","4","j","if","h","4","lt","sum","i","1","f","i","j","max","f","i","j","f","i","1","j","if","f","N","0","lt","0","cout","lt","lt","Impossible","return","0","cout","lt","lt","f","N","0","return","0","做","这道题","总是","我想","逝去","青春","那一个","夜晚","写下","金明","预算","方案","时","激动","而又","不满足","心情","毛病","时","一遍","又一遍","纠错","想必","每一次","AC","都是","珍贵的","回想"]},{"title":"关于图论的第2优解","url":"/posts/关于图论的第2优解.html","content":"正常思路是spfa找最短路，再拆最短路上的边走spfa，保存最小值。\n(本来我准备以玛丽卡为例题，鬼知道它是拆完边后保存最大值，讲道理，就应该是最坏情况)\n正如最近的博文所述，也可以用多路归并解决。\n\n\n#include&lt;bits/stdc++.h>\nusing namespace std;\n\nconst int maxN=1000+5,maxM=1000000+5,maxK=5,INF=0x7F7F7F7F;\nstruct Edge { int a,b,dist; };\nvector G[maxN];\nvector edges;\nqueue Q;\nbool inq[maxN][maxN];\nint f[maxN][maxK];\nint K=2,T[maxK],N,M;\nint q1,q2,a1,a2;\nvoid merge(int*,int*,int);\n\nint main()\n{\n    int u,v,d,now,ans=0;\n    scanf(\"%d %d\",&amp;N,&amp;M);\n    for(int i=1;i&lt;=N;i++)\n        for(int j=1;j&lt;=K;j++)\n            f[i][j]=INF;\n    f[1][1]=0;\n    for(int i=0;i&lt;M;i++)\n    {\n        scanf(\"%d %d %d\",&amp;u,&amp;v,&amp;d);\n        edges.push_back((Edge){u,v,d});\n        G[u].push_back(i);G[v].push_back(i);\n    }\n    Q.push(1);\n    while(!Q.empty())\n    {\n        now=Q.front();Q.pop();\n        for(int i=G[now].size()-1;i>=0;i--)\n        {\n            Edge&amp; e=edges[G[now][i]];\n            if(now==e.a) v=e.b;else v=e.a;\n            if(inq[now][v]) continue;\n            inq[now][v]=1;\n            Q.push(v);\n            merge(f[v],f[now],e.dist);\n        }\n    }\n    cout&lt;&lt;f[N][K]&lt;&lt;endl;\n    return 0;\n}\n\nvoid merge(int* A,int* B,int C)\n{\n    q1=1,q2=1;\n    for(int i=1;i&lt;=K;i++)\n    {\n        a1=A[q1],a2=B[q2]+C;\n        if(a1>a2) T[i]=a2,q2++;\n        else T[i]=a1,q1++;\n    }\n    for(int i=1;i&lt;=K;i++) A[i]=T[i];\n}\n\n\n上述代码无法保证正确，但我相信算法才是最重要的。\n","title_tokenize":["关","于图论","2","优解"],"content_tokenize":["正常","思路","spfa","找","最","短路","再拆","最","短路","上","走","spfa","保存","最小值","本来","准备","玛丽","卡","例题","鬼","知道","它是","拆完边","后","保存","最大值","讲","道理","应该是","最","坏","情况","正","最近","博文","述","用多路","归并","解决","include","lt","bits","std","c++","h","using","namespace","std","const","int","maxN","1000","5","maxM","1000000","5","maxK","5","INF","0","x","7","F","7","F","7","F","7","F","struct","Edge","int","a","b","dist","vector","G","maxN","vector","edges","queue","Q","bool","inq","maxN","maxN","int","f","maxN","maxK","int","K","2","T","maxK","N","M","int","q","1","q","2","a","1","a","2","void","merge","int","int","int","int","main","int","u","v","d","now","ans","0","scanf","d","d","amp","N","amp","M","for","int","i","1","i","lt","N","i","for","int","j","1","j","lt","K","j","f","i","j","INF","f","1","1","0","for","int","i","0","i","lt","M","i","scanf","d","d","d","amp","u","amp","v","amp","d","edges","push","back","Edge","u","v","d","G","u","push","back","i","G","v","push","back","i","Q","push","1","while","Q","empty","now","Q","front","Q","pop","for","int","i","G","now","size","1","i","0","i","Edge","amp","e","edges","G","now","i","if","now","e","a","v","e","b","else","v","e","a","if","inq","now","v","continue","inq","now","v","1","Q","push","v","merge","f","v","f","now","e","dist","cout","lt","lt","f","N","K","lt","lt","endl","return","0","void","merge","int","A","int","B","int","C","q","1","1","q","2","1","for","int","i","1","i","lt","K","i","a","1","A","q","1","a","2","B","q","2","C","if","a","1","a","2","T","i","a","2","q","2","else","T","i","a","1","q","1","for","int","i","1","i","lt","K","i","A","i","T","i","上述","代码","没法","保证","正确","相信","算法","才是","最重要"]},{"title":"Vijos P1412 多人背包","url":"/posts/Vijos-p1412-多人背包.html","content":"【描述】DD 和好朋友们要去爬山啦！他们一共有 K 个人，每个人都会背一个包。这些包的容量是相同的，都是 V。可以装进背包里的一共有 N 种物品，每种物品都有给定的体积和价值。\n在 DD 看来，合理的背包安排方案是这样的：\n每个人背包里装的物品的总体积恰等于包的容量。每个包里的每种物品最多只有一件，但两个不同的包中可以存在相同的物品。任意两个人，他们包里的物品清单不能完全相同。在满足以上要求的前提下，所有包里的所有物品的总价值最大是多少呢？\n【格式】输入格式第一行有三个整数：K、V、N( 1 &lt;= K &lt;= 50， 0 &lt;= V &lt;= 5000，1 &lt;= N &lt;= 200 )。\n第二行开始的 N 行，每行有两个整数，分别代表这件物品的体积和价值。\n输出格式只需输出一个整数，即在满足以上要求的前提下所有物品的总价值的最大值。\n【样例】输入样例2 10 53 127 202 45 61 1\n输出样例57\n【限制】各个测试点1s\n【来源】dd_engi大神\n【分析】题目分析：刚看题目，可以发现又是最优k解（为什么是“又”），那么就可以尝试以最优k解为模板来建立相同的模型。\n算法分析：首先，是每个有序表代表着什么。根据模板，每个有序表代表着一个状态（可能是容量，行列）的解集，不妨假设有序表f[V]代表容量为V时的解集{f(V,1),f(V,2)…f(V,k)}。\n那么，这个假设正确吗？答案是确定的，就像上一篇博文所说，最优k解的原理是多个有序表的合并，考虑到了所有的解，因而有序表首先要满足是包含所有的解或优于其它的解，这种假设显然是正确的。\n接下来就要考虑有序表的合并，这里就应该将上一篇博文的算法一般化。\n\n\nvoid merge(int* A,int* B,int C)\n{\n    q1=1,q2=1;\n    for(int i=1;i=K;i++)\n    {\n        a1=A[q1],a2=B[q2]+C;\n        if(a1a2) T[i]=a2,q2++;\n        else T[i]=a1,q1++;\n    }\n    for(int i=1;i=K;i++) A[i]=T[i];\n}\n\n\n数据分析：1&lt;=K&lt;=50,0&lt;=V&lt;=5000数据过小。\n代码分析：\n\n\n#includebits/stdc++.h>\nusing namespace std;\n\nconst int maxK=50+5,maxV=5000+5,maxN=200+5,INF=0x7F7F7F7F;\nint K,V,N,q1,q2,a1,a2;\nint f[maxV][maxK],T[maxK];\nvoid merge(int*,int*,int);\n\nint main()\n{\n    int v,a,ans=0;\n    scanf(\"%d %d %d\",&amp;K,&amp;V,&amp;N);\n    for(int i=0;i=V;i++)\n        for(int j=1;j=K;j++)\n            f[i][j]=-INF;\n    f[0][1]=0;\n    for(int i=1;i=N;i++)\n    {\n        scanf(\"%d %d\",&amp;v,&amp;a);\n        for(int j=V;j>=v;j--) if(f[j-v][1]>-1) merge(f[j],f[j-v],a);\n    }\n    for(int i=1;i=K;i++) ans+=f[V][i];\n    printf(\"%d\\n\",ans);\n\n    return 0;\n}\n\nvoid merge(int* A,int* B,int C)\n{\n    q1=1,q2=1;\n    for(int i=1;i=K;i++)\n    {\n        a1=A[q1],a2=B[q2]+C;\n        if(a1a2) T[i]=a2,q2++;\n        else T[i]=a1,q1++;\n    }\n    for(int i=1;i=K;i++) A[i]=T[i];\n}\n\n总结一下，就好像看到最大值最小或最小值最大想到二分答案，看到最优的第（前）k个解想到多路归并。\n","title_tokenize":["Vijos","P","1412","多人","背包"],"content_tokenize":["描写","DD","和好","朋友们","去","爬山","一共","K","个人","每个人","都会","背","包","包","容量","相同","都是","V","装进","背包","里","一共","N","物品","每种","物品","都","给定","体积","价值","DD","看来","合理的","背包","安排","方案","每个人","背包","里","装","物品","总","体积","恰","等于","包","容量","每一个","包","里","每种","物品","最多","一件","两个","不同的","包","中","存在","相同","物品","任意","两","个人","包","里","物品","清单","不能","完全相同","满足","以上","要求","条件","下","所有","包","里","所有","物品","总价值","最大","是多少","格式","输入","格式","一行","三个","整数","K","V","N","1","lt","K","lt","50","0","lt","V","lt","5000","1","lt","N","lt","200","行","N","行","每行","两个","整数","分别","代表","件","物品","体积","价值","输出","格式","只","需","输出","整数","满足","以上","要求","条件","下","所有","物品","总价值","最大值","样例","输入","样例","2","10","53","127","202","45","61","1","输出","样例","57","限制","测试","点","1","s","来源","dd","engi","大神","分析","题目","分析","刚","看","题目","发现","最优","k","解","那末","尝试","最优","k","解","模板","建立","相同","模型","算法","分析","每一个","有序","表","代表","模板","每一个","有序","表","代表","状态","可能","容量","行列","解集","无妨","假定","有序","表","f","V","代表","容量","V","时","解集","f","V","1","f","V","2","f","V","k","那末","假定","正确","答案","肯定","上","一篇","博文","所说","最优","k","解","原理","有序","表","合并","考虑","到了","解","有序","表","满足","包括","解","优于","解","这类","假定","明显","正确的","接下来","就要","考虑","有序","表","合并","应当","上","一篇","博文","算法","一般化","void","merge","int","A","int","B","int","C","q","1","1","q","2","1","for","int","i","1","i","K","i","a","1","A","q","1","a","2","B","q","2","C","if","a","1","a","2","T","i","a","2","q","2","else","T","i","a","1","q","1","for","int","i","1","i","K","i","A","i","T","i","数据","分析","1","lt","K","lt","50","0","lt","V","lt","5000","数据","小","代码","分析","includebits","std","c++","h","using","namespace","std","const","int","maxK","50","5","maxV","5000","5","maxN","200","5","INF","0","x","7","F","7","F","7","F","7","F","int","K","V","N","q","1","q","2","a","1","a","2","int","f","maxV","maxK","T","maxK","void","merge","int","int","int","int","main","int","v","a","ans","0","scanf","d","d","d","amp","K","amp","V","amp","N","for","int","i","0","i","V","i","for","int","j","1","j","K","j","f","i","j","INF","f","0","1","0","for","int","i","1","i","N","i","scanf","d","d","amp","v","amp","a","for","int","j","V","j","v","j","if","f","j","v","1","1","merge","f","j","f","j","v","a","for","int","i","1","i","K","i","ans","f","V","i","printf","d","n","ans","return","0","void","merge","int","A","int","B","int","C","q","1","1","q","2","1","for","int","i","1","i","K","i","a","1","A","q","1","a","2","B","q","2","C","if","a","1","a","2","T","i","a","2","q","2","else","T","i","a","1","q","1","for","int","i","1","i","K","i","A","i","T","i","总结","一下","好像","看到","最大值","最小","最小值","最大","想到","二分","答案","看到","最优","前","k","解","想到","多路","归并"]},{"title":"UVa 11997 K Smallest Sums","url":"/posts/UVa-11997-k-smallest-sums.html","content":"DescriptionYou’re given k arrays, each array has k integers. There are kk  ways to pick exactly one element in each array and calculate the sum of the integers. Your task is to find the k smallest sums among them.\n你被赋予了k个数组，每个数组都有k个整数。有kk的方式去在每个数组中挑选一个数，然后计算这些整数之和。你的任务是找到他们之间的最小的和。\nInputThere will be several test cases. The first line of each case contains an integer k (2 ≤ k ≤ 750). Each of the following k lines contains k positive integers in each array. Each of these integers does not exceed 1,000,000. The input is terminated by end-of-file (EOF).\n将有几个测试数据。每个数据的第一行包含一个整数k（2≤k≤750）。每个下面的K行中包含每个数组中的k个正整数。这些整数中的每一个不超过1000000。输入EOF结束（EOF）。\nOutputFor each test case, print the k smallest sums, in ascending order.\n对于每一个测试数据，输出最小的和，以递增的顺序。\nSample Input31 8 59 2 510 7 621 11 2\nSample Output9 10 122 2\n注：以上翻译取自机翻，加上我的修改，应该勉强能看。\n题目分析：非常简单明了的题意，如果是最优解，可以直接从每个序列选取最大值，但是由于是前优K解，所以没法这么直接。\n算法分析：对于前优K解，根据刘汝佳大神的方法，可以用多路归并解决。\n解决这个问题之前，可以先考虑它的简化版：给出两个长度为n的有序表A,B各取一个数，可以有n2个和，求最小的前n个和。\n我们可以将这n2个和分成n个有序表\n表1：A1+B1 &lt;= A1+B2 &lt;= A1+B3 &lt;= …表2：A2+B1 &lt;= A2+B2 &lt;= A2+B3 &lt;= …表3：A3+B1 &lt;= A3+B2 &lt;= A3+B3 &lt;= …\n可以看出当A,B递增时，上表也是递增。\n可以用二元组(s,b)表示一个元素，其中s=Aa+Ab。当需要某个表中的下一个元素(s’,b+1)时，只需要\ns’=Aa+Bb+1=Aa+Bb-Bb+Bb+1=s-Bb+Bb+1\n因此，定义下面这个结构体来表示上述二元组。\nstruct Item\n{\n    int s,b;\n    Item(int s,int b):s(s),b(b){}\n    bool operator &lt; (const Item&amp; rhs) const  \n    {       \n        return s > rhs.s;\n    }\n};\n\n\n\n每次读入一组数据时，将表合并，取n次最小值；因为在取出表1的元素之前，表2对应位置的数一定要大，一定不是当前的最小值，所以当取出这个元素后，再将它同列的下一个元素入队。\nvoid merge(int* A,int* B,int* C,int n)\n{\n    priority_queue q;\n    for(int i=0;i&lt;n;i++) q.push(Item(A[i]+B[0],0));\n    for(int i=0;i&lt;n;i++)\n    {\n        Item item=q.top();q.pop();\n        C[i]=item.s;\n        int b=item.b;\n        if(b+1&lt;n) q.push(Item(item.s-B[b]+B[b+1],b+1));\n    }\n}\n\n\n\n这样，两个表的问题就解决了。如果是多个表的话，两两合并就可以。\n数据分析：k&lt;=750，并不算特别大，优先队列完全可以承受。\n代码分析：\n#include&lt;bits/stdc++.h>\nusing namespace std;\n\nconst int maxn=768;\nint A[maxn][maxn];\n\nstruct Item\n{\n    int s,b;\n    Item(int s,int b):s(s),b(b){}\n    bool operator &lt; (const Item&amp; rhs) const     \n    {         \n        return s > rhs.s;\n    }\n};\n\nvoid merge(int* A,int* B,int* C,int n)\n{\n    priority_queue q;\n    for(int i=0;i&lt;n;i++) q.push(Item(A[i]+B[0],0));\n    for(int i=0;i&lt;n;i++)\n    {\n        Item item=q.top();q.pop();\n        C[i]=item.s;\n        int b=item.b;\n        if(b+1&lt;n) q.push(Item(item.s-B[b]+B[b+1],b+1));\n    }\n}\n\nint main()\n{\n    int n;\n    while(scanf(\"%d\",&amp;n)==1)\n    {\n        for(int i=0;i&lt;n;i++) \n        {\n            for(int j=0;j&lt;n;j++) scanf(\"%d\",&amp;A[i][j]);\n            sort(A[i],A[i]+n);\n        }\n        for(int i=1;i&lt;n;i++) merge(A[0],A[i],A[0],n);\n        for(int i=0;i&lt;n;i++) printf(\"%d \",A[0][i]);\n        printf(\"\\n\");\n    }\n    return 0;\n}\n\n\n多路归并可以广泛地运用于各种求最优k解，原理是将多个有序表合并成一个有序表，对于答案来说，其必然是一个有序表，故此算法正确，并将所有可能性考虑到。\n","title_tokenize":["UVa","11997","K","Smallest","Sums"],"content_tokenize":["DescriptionYou","re","given","k","arrays","each","array","has","k","integers","There","are","kk","ways","to","pick","exactly","one","element","in","each","array","and","calculate","the","sum","of","the","integers","Your","task","is","to","find","the","k","smallest","sums","among","them","赋予","k","数组","每一个","数组","都","k","整数","kk","方式","去","每一个","数组","中","挑选","1","个数","计算","整数","之和","任务","找到","之间","最小","InputThere","will","be","several","test","cases","The","first","line","of","each","case","contains","an","integer","k","2","k","750","Each","of","the","following","k","lines","contains","k","positive","integers","in","each","array","Each","of","these","integers","does","not","exceed","1","000","000","The","input","is","terminated","by","end","of","file","EOF","几个","测试数据","每一个","数据","一行","包括","整数","k","2","k","750","每一个","下面","K","行","中","包括","每一个","数组","中的","k","正","整数","整数","中的","每一个","不超过","1000000","输入","EOF","结束","EOF","OutputFor","each","test","case","print","the","k","smallest","sums","in","ascending","order","每一个","测试数据","输出","最小","递增","顺序","Sample","Input","31","8","59","2","510","7","621","11","2","Sample","Output","9","10","122","2","注","以上","翻译","取自","机","翻","加上","修改","应当","委曲","看","题目","分析","非常","简单","明了","题意","最优","解","直接","每一个","序列","选取","最大值","前","优","K","解","没法","直接","算法","分析","前","优","K","解","刘汝佳","大神","方法","用多路","归并","解决","解决","这个问题","之前","先","考虑","简化","版","给出","两个","长度","n","有序","表","A","B","取","1","个数","n","2个","求","最小","前","n","n","2个","分成","n","有序","表","表","1","A","1","B","1","lt","A","1","B","2","lt","A","1","B","3","lt","表","2","A","2","B","1","lt","A","2","B","2","lt","A","2","B","3","lt","表","3","A","3","B","1","lt","A","3","B","2","lt","A","3","B","3","lt","看出","A","B","递增","时","上","表","也是","递增","二元","组","s","b","表示","元素","中","s","Aa","Ab","需要","表","中的","下一个","元素","s","b","1","时","只","需要","s","Aa","Bb","1","Aa","Bb","Bb","Bb","1","s","Bb","Bb","1","定义","下面","结构","体","表示","上述","二元","组","struct","Item","int","s","b","Item","int","s","int","b","s","s","b","b","bool","operator","lt","const","Item","amp","rhs","const","return","s","rhs","s","每次","读入","一组","数据","时","表","合并","取","n","次","最小值","取出","表","1","元素","之前","表","2","对应","位置","数一定要","大","一定","不是","当前","最小值","取出","元素","后","再","将它","列","下一个","元素","入队","void","merge","int","A","int","B","int","C","int","n","priority","queue","q","for","int","i","0","i","lt","n","i","q","push","Item","A","i","B","0","0","for","int","i","0","i","lt","n","i","Item","item","q","top","q","pop","C","i","item","s","int","b","item","b","if","b","1","lt","n","q","push","Item","item","s","B","b","B","b","1","b","1","两个","表","问题","解决","表","两两","合并","数据","分析","k","lt","750","不算","特别","大","优先","队列","完全","承受","代码","分析","include","lt","bits","std","c++","h","using","namespace","std","const","int","maxn","768","int","A","maxn","maxn","struct","Item","int","s","b","Item","int","s","int","b","s","s","b","b","bool","operator","lt","const","Item","amp","rhs","const","return","s","rhs","s","void","merge","int","A","int","B","int","C","int","n","priority","queue","q","for","int","i","0","i","lt","n","i","q","push","Item","A","i","B","0","0","for","int","i","0","i","lt","n","i","Item","item","q","top","q","pop","C","i","item","s","int","b","item","b","if","b","1","lt","n","q","push","Item","item","s","B","b","B","b","1","b","1","int","main","int","n","while","scanf","d","amp","n","1","for","int","i","0","i","lt","n","i","for","int","j","0","j","lt","n","j","scanf","d","amp","A","i","j","sort","A","i","A","i","n","for","int","i","1","i","lt","n","i","merge","A","0","A","i","A","0","n","for","int","i","0","i","lt","n","i","printf","d","A","0","i","printf","n","return","0","多路","归并","广泛地","运用于","求","最优","k","解","原理","有序","表","合并","成","有序","表","答案","来讲","一定","有序","表","算法","正确","所有","可能性","考虑到"]},{"title":"动态规划专练（五）","url":"/posts/动态规划专练（五）.html","content":"1.最长公共子序列(LCS)时间限制：3000 ms | 内存限制：65535 KB难度：3 |  提供网站：NYOJ (稍有改动)\n描述咱们就不拐弯抹角了，如题，需要你做的就是写一个程序，得出最长公共子序列。tip：最长公共子序列也称作最长公共子串(不要求连续)，英文缩写为LCS（Longest Common Subsequence）。其定义是，一个序列 S ，如果分别是两个或多个已知序列的子序列，且是所有符合此条件序列中最长的，则 S 称为已知序列的最长公共子序列。\n输入第一行给出一个整数N(0&lt;N&lt;100)表示待测数据组数接下来每组数据两行，分别为待测的两组字符串。每个字符串长度不大于5000.\n输出每组测试数据输出一个整数，表示最长公共子序列长度。每组结果占一行。\n样例输入2asdfadfsd123abcabc123abc\n样例输出36\n代码：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int up=5000 +5;\nchar a[up],b[up];int k,l,f[2][up],T;\n\nint main()\n{\n    scanf(\"%d\",&amp;T);\n    while(T--)\n    {\n        memset(f[0],0,sizeof f[0]);\n        memset(f[1],0,sizeof f[1]);\n        scanf(\"%s %s\",a+1,b+1);\n        k=strlen(a+1),l=strlen(b+1);\n        for(int i=1;i&lt;=k;i++)\n            for(int j=1;j&lt;=l;j++)\n                if(a[i]==b[j]) f[i&amp;1][j]=f[(i-1)&amp;1][j-1]+1;\n                else f[i&amp;1][j]=max(f[(i-1)&amp;1][j],f[i&amp;1][j-1]);\n        printf(\"%d\\n\",f[k&amp;1][l]);\n    }\n\n    return 0;\n}\n\n\n如果是直接开5000*5000的数组，内存是不够的，所以要用滚动数组进行优化。\n用非常常用的k&amp;1优化，第一维保留这一排与上一排的状态，根据最长公共子序列问题的动态转移方程：如果a[i]=a[j]，f[i,j]=f[i-1,j-1]+1；否则，f[i,j]=max(f[i-1,j],f[i,j-1])。可以变成上面的\nif(a[i]==b[j]) f[i&amp;1][j]=f[(i-1)&amp;1][j-1]+1;else f[i&amp;1][j]=max(f[(i-1)&amp;1][j],f[i&amp;1][j-1]);\n2.最长上升子序列(LIS)时间限制：3000 ms | 内存限制：65535 KB难度：4 | 提供网站：NYOJ\n描述求一个字符串的最长递增子序列的长度如：dabdbf最长递增子序列就是abdf，长度为4\n输入第一行一个整数0&lt;n&lt;20,表示有n个字符串要处理随后的n行，每行有一个字符串，该字符串的长度不会超过10000\n输出输出字符串的最长递增子序列的长度\n样例输入3aaaababcabklmncdefg\n样例输出137\n代码：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int up=10000 +5;\nint T,f[up],g[up];\nchar a[up];\n\nint main()\n{\n    int k,l,maxn=-1;\n    scanf(\"%d\",&amp;T);\n    while(T--)\n    {\n        memset(g,0x7f,sizeof g);\n        memset(f,0,sizeof f);\n        maxn=-1;\n        scanf(\"%s\",a);l=strlen(a);\n        for(int i=0;i&lt;l;i++)\n        {\n            k=lower_bound(g+1,g+l+1,a[i])-g;\n            f[i]=k;\n            g[k]=a[i];\n            maxn=max(maxn,f[i]);\n        }\n        printf(\"%d\\n\",maxn);\n    }\n    return 0;\n}\n\n\n假设有两个状态a,b满足Aa&lt;Ab且d(a)=d(b)，则对于后续所有的状态，b都不会比a更优。\n因此，如果只保留a一定不会丢失最优解，设g(i)表示d值为i的最小状态，不断更新，二分查找。\n3.最大连续和题目描述 Description给定一个长度为n的一个序列A1，A2，…，An，求序列中连续子序列的最大和。例如：当输入为-5，3，5，7，-15，6，9，27，-36，10时，连续子序列6，9，27的和为42是最大值；而当序列变成-5，3，5，8，-15，6，9，27，-36，10时，连续子序列3，5，8，-15，6，9，27的和为43是最大值。\n输入描述 Input Description第一行为n (n≤1000)，第二行为n个数，表示序列Ai（-10000≤Ai≤10000）。\n输出描述 Output Description一个数，表示连续子序列的最大和。\n样例输入 Sample Input10-5 3 5 8 -15 6 9 27 -36 10\n样例输出 Sample Output43\n数据范围及提示 Data Size &amp; Hint-10000≤Ai≤10000n≤1000\n代码：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int up=1000 +5;\nint T,f[up],a[up];\n\nint main()\n{\n    int maxn=-1;\n    scanf(\"%d\",&amp;T);\n    for(int i=1;i&lt;=T;i++)\n    {\n    scanf(\"%d\",&amp;a[i]);\n    f[i]=max(0,f[i-1])+a[i];\n    maxn=max(maxn,f[i]);\n    }\n    printf(\"%d\\n\",maxn);\n\n    return 0;\n}\n","title_tokenize":["动态","计划","专","练","5"],"content_tokenize":["1","最长","公共","子","序列","LCS","时间","限制","3000","ms","内存","限制","65535","KB","难度","3","提供","网站","NYOJ","稍","改动","描写","不","拐弯抹角","题","需要","做","写","程序","得出","最长","公共","子","序列","tip","最长","公共","子","序列","称作","最长","公共","子","串","不要","求","连续","英文","缩写","LCS","Longest","Common","Subsequence","定义","序列","S","分别","两个","已知","序列","子","序列","所有","符合","条件","序列","中","最长的","S","称为","已知","序列","最长","公共","子","序列","输入","一行","给出","整数","N","0","lt","N","lt","100","表示","测","数据","组","数","接下来","组","数据","两","行","分别","测","两","组","字符串","每一个","字符串","长度","不","大于","5000","输出","组","测试数据","输出","整数","表示","最长","公共","子","序列","长度","组","占","一行","样例","输入","2","asdfadfsd","123","abcabc","123","abc","样例","输出","36","代码","include","lt","bits","std","c++","h","gt","using","namespace","std","const","int","up","5000","5","char","a","up","b","up","int","k","l","f","2","up","T","int","main","scanf","d","amp","T","while","T","memset","f","0","0","sizeof","f","0","memset","f","1","0","sizeof","f","1","scanf","s","s","a","1","b","1","k","strlen","a","1","l","strlen","b","1","for","int","i","1","i","lt","k","i","for","int","j","1","j","lt","l","j","if","a","i","b","j","f","i","amp","1","j","f","i","1","amp","1","j","1","1","else","f","i","amp","1","j","max","f","i","1","amp","1","j","f","i","amp","1","j","1","printf","d","n","f","k","amp","1","l","return","0","直接","开","5000","5000","数组","内存","不够","要用","转动","数组","进行","优化","非常","常用的","k","amp","1","优化","第一","维","保存","一排","上","一排","状态","最长","公共","子","序列","问题","动态","转移","方程","a","i","a","j","f","i","j","f","i","1","j","1","1","f","i","j","max","f","i","1","j","f","i","j","1","变成","上面","if","a","i","b","j","f","i","amp","1","j","f","i","1","amp","1","j","1","1","else","f","i","amp","1","j","max","f","i","1","amp","1","j","f","i","amp","1","j","1","2","最长","上升","子","序列","LIS","时间","限制","3000","ms","内存","限制","65535","KB","难度","4","提供","网站","NYOJ","描写","求","字符串","最长","递增","子","序列","长度","dabdbf","最长","递增","子","序列","abdf","长度","4","输入","一行","整数","0","lt","n","lt","20","表示","n","字符串","处理","随后","n","行","每行","字符串","字符串","长度","不会","超过","10000","输出","输出","字符串","最长","递增","子","序列","长度","样例","输入","3","aaaababcabklmncdefg","样例","输出","137","代码","include","lt","bits","std","c++","h","gt","using","namespace","std","const","int","up","10000","5","int","T","f","up","g","up","char","a","up","int","main","int","k","l","maxn","1","scanf","d","amp","T","while","T","memset","g","0","x","7","f","sizeof","g","memset","f","0","sizeof","f","maxn","1","scanf","s","a","l","strlen","a","for","int","i","0","i","lt","l","i","k","lower","bound","g","1","g","l","1","a","i","g","f","i","k","g","k","a","i","maxn","max","maxn","f","i","printf","d","n","maxn","return","0","假定","两个","状态","a","b","满足","Aa","lt","Ab","d","a","d","b","后续","状态","b","都","不会","a","更","优","只","保存","a","一定","不会","丢失","最优","解","设","g","i","表示","d","值","i","最小","状态","不断","更新","二分","查找","3","最大","连续","题目","描写","Description","给定","长度","n","序列","A","1","A","2","An","求","序列","中","连续","子","序列","最大","输入","5","3","5","7","15","6","9","27","36","10时","连续","子","序列","6","9","27","42","最大值","序列","变成","5","3","5","8","15","6","9","27","36","10时","连续","子","序列","3","5","8","15","6","9","27","43","最大值","输入","描写","Input","Description","第一","行动","n","n","1000","行动","n","个数","表示","序列","Ai","10000","Ai","10000","输出","描写","Output","Description","数","表示","连续","子","序列","最大","样例","输入","Sample","Input","10","5","3","5","8","15","6","9","27","36","10","样例","输出","Sample","Output","43","数据","范围","提示","Data","Size","amp","Hint","10000","Ai","10000","n","1000","代码","include","lt","bits","std","c++","h","gt","using","namespace","std","const","int","up","1000","5","int","T","f","up","a","up","int","main","int","maxn","1","scanf","d","amp","T","for","int","i","1","i","lt","T","i","scanf","d","amp","a","i","f","i","max","0","f","i","1","a","i","maxn","max","maxn","f","i","printf","d","n","maxn","return","0"]},{"title":"动态规划专练（四）","url":"/posts/动态规划专练（四）.html","content":"1.采药题目描述辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”\n如果你是辰辰，你能完成这个任务吗？\n输入格式第一行有两个整数T（1 &lt;= T &lt;= 1000）和M（1 &lt;= M &lt;= 100），用一个空格隔开，T代表总共能够用来采药的时间，M代表山洞里的草药的数目。接下来的M行每行包括两个在1到100之间（包括1和100）的整数，分别表示采摘某株草药的时间和这株草药的价值。\n输出格式一行，这一行只包含一个整数，表示在规定的时间内，可以采到的草药的最大总价值。\n输入样例70 371 10069 11 2\n输出样例3\n说明对于30%的数据，M &lt;= 10；\n对于全部的数据，M &lt;= 100。\nNOIP2005普及组第三题，也就是背包问题中的01背包。\n代码：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int up=1000 +5;\n\nint main()\n{\n    int t,m,ti,vi,f[up];\n    memset(f,0,sizeof f);\n    scanf(\"%d %d\",&amp;t,&amp;m);\n    while(m--)\n    {\n        scanf(\"%d %d\",&amp;ti,&amp;vi);\n        for(int i=t;i&gt;=ti;i--) f[i]=max(f[i],f[i-ti]+vi);\n    }\n    printf(\"%d\\n\",f[t]);\n\n    return 0;\n}\n\n\n对于 背包问题，我个人是这么认为的：\n首先，滚动数组（其实就是压了并不重要的一维）是必然的，而且背包问题滚动数组更容易理解。\n在01背包中，循环由大到小，如“for(int i=C;i&gt;=V;i–) f[i]=max(f[i],f[i-V]+W);”，较末的状态转移自较前的状态是背包问题也是大部分动态规划题目的特点，而较末的状态先被计算，对同一个循环中的其它状态是不会有影响的，因为较前的状态只会转移自比它更前的状态；而在完全背包中，循环由小到大，如“for(int i=V;i&lt;=C;i++) f[i]=max(f[i],f[i-V]+W);”，较前的状态先被计算，于是就有可能对同一循环中之后的状态造成影响。\n至于剩下的一些背包问题，则是万变不离其宗，比如多重背包，可以看作有同种物品的01背包，还有混合背包，也可以同样看作是不同多种物品的01背包。\n2.点集配对问题问题描述空间里有n个点P0,P1,P2,…,Pn-1，把它们分成n/2对，使得每个点恰好在一个点对中，且所有点对距离之和尽量小。\n输入格式第一行是整数n，数据保证n为偶数；接下来n行每行三个数，分别代表点i的x,y,z坐标。\n输出格式输出只有一行，为最小的所有点对距离之和，保留两位小数。\n输入样例41 1 11 1 21 4 31 6 6\n输出样例4.61\n说明n&lt;=20，|xi|,|yi|,|zi|&lt;=10000。\n代码：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int up=20 +5;\nconst double inf=1e10;\nstruct node\n{\n    int x,y,z;\n} g[up];\nint n,k;\ndouble f[1&lt;&lt;up];//二进制集合表示状态\n\ndouble dis(int i,int j)\n{\n    return sqrt(((double)(g[i].x-g[j].x)*(g[i].x-g[j].x)+(g[i].y-g[j].y)*(g[i].y-g[j].y)+(g[i].z-g[j].z)*(g[i].z-g[j].z)));\n}\n\nint main()\n{\n    scanf(\"%d\",&amp;n);\n    for(int i=0;i&lt;n;i++) scanf(\"%d %d %d\",&amp;g[i].x,&amp;g[i].y,&amp;g[i].z);\n    for(int i=1;i&lt;(1&lt;&lt;n);i++)\n    {\n    f[i]=inf;\n    for(k=0;k&lt;n;k++) if(i&amp;(1&lt;&lt;k)) break;\n    for(int j(k+1);j&lt;n;j++) if(i&amp;(1&lt;&lt;j)) f[i]=min(f[i],dis(k,j)+f[i^(1&lt;&lt;j)^(1&lt;&lt;k)]);\n    }\n    printf(\"%.2lf\",f[(1&lt;&lt;n)-1]);\n\n    return 0;\n}\n\n\n代码本身没有什么亮点，但有一处值得注意，当遇到集合DP时可以考虑使用二进制代表集合。\n","title_tokenize":["动态","计划","专","练","4"],"content_tokenize":["1","采药","题目","描写","辰辰","天资","聪颖的","孩子","梦想","成为","世界上","最","伟大的","医师","为此","想","拜","附近","最","威信","医师","师","医师","判断","资质","出","困难","医师","带到","到处","都是","草药","岩穴","里","说","孩子","岩穴","里","有一些","不同的","草药","采","株","都","需要","时间","株","本身","价值","会","给你","一段时间","段","时间","里","采","草药","聪明的","孩子","应当","采","草药","总价值","最大","辰辰","完成","任务","输入","格式","一行","两个","整数","T","1","lt","T","lt","1000","M","1","lt","M","lt","100","空格","隔开","T","代表","总共","能够","用来","采药","时间","M","代表","岩穴","里","草药","数目","接下来","M","行","每行","包括","两个","1","100","之间","包括","1","100","整数","分别","表示","采摘","某株","草药","时间","这株","草药","价值","输出","格式","一行","一行","只","包括","整数","表示","规定","时间","内","采","草药","最大","总价值","输入","样例","70","371","10069","11","2","输出","样例","3","说明","30%","数据","M","lt","10","全部","数据","M","lt","100","NOIP","2005","普及","组","第三","题","也就是","背包","问题","中的","01","背包","代码","include","lt","bits","std","c++","h","gt","using","namespace","std","const","int","up","1000","5","int","main","int","t","m","ti","vi","f","up","memset","f","0","sizeof","f","scanf","d","d","amp","t","amp","m","while","m","scanf","d","d","amp","ti","amp","vi","for","int","i","t","i","gt","ti","i","f","i","max","f","i","f","i","ti","vi","printf","d","n","f","t","return","0","背包","问题","个人","认为","转动","数组","其实","压","不重要","1","维","一定","背包","问题","转动","数组","更","容易","理解","01","背包","中","循环","大","小","for","int","i","C","i","gt","V","i","–","f","i","max","f","i","f","i","V","W","末","状态","转移","前","状态","背包","问题","也是","大部分","动态","计划","题目","特点","末","状态","先","计算","同一个","循环","中的","状态","不会","有影响","前","状态","只","会","转移","更","前","状态","完全","背包","中","循环","小","大","for","int","i","V","i","lt","C","i","f","i","max","f","i","f","i","V","W","前","状态","先","计算","有可能","同一","循环","中","以后","状态","造成","影响","剩下","背包","问题","万变不离其宗","多重","背包","看做","同种","物品","01","背包","混合","背包","看做","不同","多种","物品","01","背包","2","点","集","配对","问题","问题","描写","空间","里","n","点","P","0","P","1","P","2","Pn","1","分成","n","2","每一个","点","恰好","点","中","所有","点","距离","之和","尽可能","小","输入","格式","一行","整数","n","数据","保证","n","偶数","接下来","n","行","每行","3","个数","分别","代表","点","i","x","y","z","坐标","输出","格式","输出","一行","最小","所有","点","距离","之和","保存","两位","小数","输入","样例","41","1","11","1","21","4","31","6","6","输出","样例","4.61","说明","n","lt","20","xi","yi","zi","lt","10000","代码","include","lt","bits","std","c++","h","gt","using","namespace","std","const","int","up","20","5","const","double","inf","1","e","10","struct","node","int","x","y","z","g","up","int","n","k","double","f","1","lt","lt","up","二进制","集合","表示","状态","double","dis","int","i","int","j","return","sqrt","double","g","i","x","g","j","x","g","i","x","g","j","x","g","i","y","g","j","y","g","i","y","g","j","y","g","i","z","g","j","z","g","i","z","g","j","z","int","main","scanf","d","amp","n","for","int","i","0","i","lt","n","i","scanf","d","d","d","amp","g","i","x","amp","g","i","y","amp","g","i","z","for","int","i","1","i","lt","1","lt","lt","n","i","f","i","inf","for","k","0","k","lt","n","k","if","i","amp","1","lt","lt","k","break","for","int","j","k","1","j","lt","n","j","if","i","amp","1","lt","lt","j","f","i","min","f","i","dis","k","j","f","i","1","lt","lt","j","1","lt","lt","k","printf","2","lf","f","1","lt","lt","n","1","return","0","代码","本身","没有","亮点","1","处","值得","注意","遇到","集合","DP","时","考虑","使用","二进制","代表","集合"]},{"title":"NOIP模拟赛 T1 Number","url":"/posts/NOIP模拟赛 T1 Number.html","content":"【题目描述】给出一个整数x，你可以对x进行两种操作。1、将x变成4x+32、将x变成8x+7问，最少通过多少次操作，使得x是1000000007的倍数？\n【输入格式】一行，一个整数x(1&lt;=x&lt;=1000000006)。\n【输出格式】一行，表示最少的操作步数。保证答案不超过10^5。\n【样例输入1】125000000\n【样例输出1】1\n【样例输入2】281250001\n【样例输出2】2\n【样例输入3】18426114\n【样例输出3】58\n【样例输入4】705616876\n【样例输出4】100000\n【数据约定】对于50%的数据，答案不超过10对于80%的数据，答案不超过1000对于100%的数据，答案不超过100000\n对于上面这道题，我第一次看到时，其实内心是崩溃的，这么诡的题，虽然知道是数学题，但还是毫无思路，只好拍上一个暴力，最后只得了50分，后来在学长提醒下发现做两次2等于做三次1：\n8（8x+7）+7=64x+63；4（4（4x+3）+3）+3=64x+63；\n再思考了一下，发现这仅仅只是开始：\n2（2x+1）+1=4x+3；2（2（2x+1）+1）+1=8x+7；\n那么就可以用2x+1代替1，2操作：\ncin&gt;&gt;num;\nwhile(true)\n{\n    num=(num*2+1)%mod;\n    kase++;\n    if(num==0) break;\n}\n\n\n输出答案时，又陷入了另一个问题，该如何输出？\n\nswitch(kase%2)\n{\n    case 0:\n    cout&lt;&lt;kase/3&lt;&lt;endl;\n    break;\n    case 1:\n    cout&lt;&lt;kase/3-1+2&lt;&lt;endl;\n    break;\n    case 2:\n    cout&lt;&lt;kase/3+1&lt;&lt;endl;\n    break;\n}\n\n\n一共有三种情况，难道真的需要上面这么做吗？\n归纳一下，(kase-1)/3+1就可以代替。\n代码如下：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst long long mod=1000000007;\nlong long kase,num;\n\nint main()\n{\n    cin&gt;&gt;num;\n    while(true)\n    {\n        num=(num*2+1)%mod;\n        kase++;\n        if(num==0) break;\n    }\n    cout&lt;&lt;(kase-1)/3+1&lt;&lt;endl;\n\n    return 0;\n}\n\n\n那么这道题就迎刃而解了。\n","title_tokenize":["NOIP","摹拟","赛","T","1","Number"],"content_tokenize":["题目","描写","给出","整数","x","x","进行","两种","操作","1","x","变成","4","x","32","x","变成","8","x","7","问","最少","多少次","操作","x","1000000007","倍数","输入","格式","一行","整数","x","1","lt","x","lt","1000000006","输出","格式","一行","表示","最少","操作","步","数","保证","答案","不超过","10","5","样例","输入","1","125000000","样例","输出","1","1","样例","输入","2","281250001","样例","输出","2","2","样例","输入","3","18426114","样例","输出","3","58","样例","输入","4","705616876","样例","输出","4","100000","数据","约定","50%","数据","答案","不超过","10","80%","数据","答案","不超过","1000","100%","数据","答案","不超过","100000","上面","这道题","第一次","看","到时","其实","内心","崩溃","诡","题","知道","数学题","毫无","思路","只","好","拍","上一个","暴力","最后","只","得了","50分","后来","在学","长","提示","下","发现","做","两次","2","等于","做","三次1","8","8","x","7","7","64","x","63","4","4","4","x","3","3","3","64","x","63","再","思考","一下","发现","仅仅","2","2","x","1","1","4","x","3","2","2","2","x","1","1","1","8","x","7","那末","2","x","1","代替","1","2","操作","cin","gt","gt","num","while","true","num","num","2","1","mod","kase","if","num","0","break","输出","答案","时","堕入","另一个","问题","输出","switch","kase","2","case","0","cout","lt","lt","kase","3","lt","lt","endl","break","case","1","cout","lt","lt","kase","3","1","2","lt","lt","endl","break","case","2","cout","lt","lt","kase","3","1","lt","lt","endl","break","一共","三种","情况","难道","真","需要","上面","做","归纳","一下","kase","1","3","1","代替","代码","以下","include","lt","bits","std","c++","h","gt","using","namespace","std","const","long","long","mod","1000000007","long","long","kase","num","int","main","cin","gt","gt","num","while","true","num","num","2","1","mod","kase","if","num","0","break","cout","lt","lt","kase","1","3","1","lt","lt","endl","return","0","那末","这道题","迎刃而解"]},{"title":"动态规划专练（三）","url":"/posts/动态规划专练（三）.html","content":"1.矩形嵌套时间限制：3000 ms  |  内存限制：65535 KB难度：4  |  提供网站：NYOJ\n描述有n个矩形，每个矩形可以用a,b来描述，表示长和宽。矩形X(a,b)可以嵌套在矩形Y(c,d)中当且仅当a&lt;c,b&lt;d或者b&lt;c,a&lt;d（相当于旋转X90度）。例如（1,5）可以嵌套在（6,2）内，但不能嵌套在（3,4）中。你的任务是选出尽可能多的矩形排成一行，使得除最后一个外，每一个矩形都可以嵌套在下一个矩形内。\n输入第一行是一个正正数N(0&lt;N&lt;10)，表示测试数据组数；每组测试数据的第一行是一个正正数n，表示该组测试数据中含有矩形的个数(n&lt;=1000)；随后的n行，每行有两个数a,b(0&lt;a,b&lt;100)，表示矩形的长和宽。\n输出每组测试数据都输出一个数，表示最多符合条件的矩形数目，每组输出占一行。\n样例输入1101 22 45 86 107 93 15 812 109 72 2\n样例输出5\n来源经典题目\n上传者张云聪\n代码（这里提供两份，一份记忆化搜索，一份DAG最长路标准套路）：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int up=1000 +5;\nstruct matrix\n{\n    int h,w;\n} a[up];\nint f[up],n;\nint fi(int x)\n{\n    if(f[x]) return f[x];\n    for(int j=1;j&lt;=n;j++)         \n    if(j==x) continue;         \n        else if((a[x].w&gt;a[j].w &amp;&amp; a[x].h&gt;a[j].h) || (a[x].h&gt;a[j].w &amp;&amp; a[x].w&gt;a[j].h))\n            f[x]=max(f[x],fi(j)+1);\n    return f[x];\n}\n\nint main()\n{\n    int N,x,y,maxn;\n\n    scanf(\"%d\",&amp;N);\n    while(N--)\n    {\n        scanf(\"%d\",&amp;n);maxn=0;memset(f,0,sizeof(f));\n        for(int i=1;i&lt;=n;i++) scanf(\"%d %d\",&amp;a[i].h,&amp;a[i].w);\n        for(int i=1;i&lt;=n;i++) maxn=max(maxn,fi(i));\n        printf(\"%d\\n\",maxn+1);\n    }\n\n    return 0;\n}\n\n\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int up=1000 +5;\nstruct matrix\n{\n    int h,w;\n} a[up];\nint f[up];\nbool cmp(const matrix&amp; x,const matrix&amp; y)\n{\n    return x.h&lt;y.h;\n}\n\nint main()\n{\n    int N,n,x,y,maxn;\n\n    scanf(\"%d\",&amp;N);\n    while(N--)\n    {\n        scanf(\"%d\",&amp;n);maxn=0;\n        memset(f,0,sizeof f);\n        for(int i=1;i&lt;=n;i++)         \n        {             \n            scanf(\"%d %d\",&amp;x,&amp;y);             \n            if(x&gt;y) a[i].h=y,a[i].w=x;\n            else a[i].h=x,a[i].w=y;\n        }\n        sort(a+1,a+n+1,cmp);\n        for(int i=2;i&lt;=n;i++)\n            for(int j=1;j&lt;i;j++)                 \n                if(a[i].w&gt;a[j].w &amp;&amp; a[i].h&gt;a[j].h) f[i]=max(f[i],f[j]+1);\n        for(int i=1;i&lt;=n;i++) maxn=max(maxn,f[i]);\n        printf(\"%d\\n\",maxn+1);\n    }\n    return 0;\n}\n\n\n2.硬币问题描述有n种硬币，面值分别为V1,V2,…Vn,每种都有无限多。给定非负整数S，可以选用多少个硬币，使得面值之和恰好为S？输出硬币数目的最小值和最大值。\n输入第一行是两个数n，S，1&lt;=n&lt;=100，0&lt;=S&lt;=10000；接下来n行是每一种硬币的面值Vi，1&lt;=Vi&lt;=S。\n输出两行各一个整数，第一行是硬币数目最小值，第二行是硬币数目最大值。\n样例输入5 1012457\n样例输出210\n来源ACM常见模型：DAG最长最短路，也可以看成完全背包。\n代码：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int up1=10000 +5,up2=100 +5,inf=0x3f3f3f3f;\nint f[up1],g[up1];\nint V[up2];\n\nint main()\n{\n    int n,S,maxn;\n\n    scanf(\"%d %d\",&amp;n,&amp;S);\n    for(int i=1;i&lt;=S;i++) f[i]=inf,g[i]=-inf;\n    for(int i=1;i&lt;=n;i++)\n    {\n        scanf(\"%d\",&amp;V[i]);\n        for(int j=V[i];j&lt;=S;j++) \n            f[j]=min(f[j],f[j-V[i]]+1),g[j]=max(g[j],g[j-V[i]]+1);\n    }\n    printf(\"%d\\n%d\",f[S],g[S]);\n    return 0;\n}\n\n\n3.信任链题目描述现在有一排人站成一列，然后开始玩游戏。\n现在告诉你有N个人（编号成1到N，排成一列），每个人有一个唯一的数字P。如果有俩个人A和B， 如果B的P是A的编号的约数并且B的编号小于A，那么A就相信B。\n现在要找出最长的信任链，即一系列人，每个人都信任他前面的一个人，序列可以不连续。\n输入格式第一行一个数N。\n下面一行N个数，表示每个人的唯一数字P。\n输出格式输出最长的信任链的长度。\n输入样例6\n1 1 2 1 4 3\n输出样例5\n数据规模30%：N&lt;1000\n100%：N0&lt;P&lt;=100\n代码：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint f[100005];\nint a[105];\n\nint main()\n{\n    int n,maxn=0,x;\n\n    cin&gt;&gt;n;\n    for(int i=1;i&lt;=n;i++) f[i]=1;\n    for(int i=1;i&lt;=n;i++)          \n    {                  \n        scanf(\"%d\",&amp;x);                  \n        for(int j=min(i,100);j&gt;=1;j--) if(i%j==0) f[i]=max(f[i],a[j]+1);\n        a[x]=max(a[x],f[i]);\n        maxn=max(maxn,f[i]);\n    }\n    printf(\"%d\\n\",maxn);\n\n    return 0;\n}\n\n\n同样是DAG最长路，但又有一些改变，首先是状态转移的改变，其次是策略的改变。\n当同样的数作为状态推出最优解时，只需考虑同一个数中的链较长的一个，因为比它小的就一定不是最优解。\n若以f[i]表示以i为尾最长的信任链，那么可以再声明a[p]表示在i之前值为p的最长信任链的长度。\n","title_tokenize":["动态","计划","专","练","3"],"content_tokenize":["1","矩形","嵌套","时间","限制","3000","ms","内存","限制","65535","KB","难度","4","提供","网站","NYOJ","描写","n","矩形","每一个","矩形","a","b","描写","表示","长","宽","矩形","X","a","b","嵌套","矩形","Y","c","d","中","仅","a","lt","c","b","lt","d","b","lt","c","a","lt","d","相当于","旋转","X","90","度","1","5","嵌套","6","2","内","不能","嵌套","3","4","中","任务","选出","尽可能","矩形","排成","一行","最后","外","每一个","矩形","都","嵌套","矩形","内","输入","一行","正","正数","N","0","lt","N","lt","10","表示","测试数据","组","数","组","测试数据","一行","正","正数","n","表示","组","测试数据","中","含有","矩形","个数","n","lt","1000","随后","n","行","每行","两","个数","a","b","0","lt","a","b","lt","100","表示","矩形","长","宽","输出","组","测试数据","都","输出","1","个数","表示","最多","符合","条件","矩形","数目","组","输出","占","一行","样例","输入","1101","22","45","86","107","93","15","812","109","72","2","样例","输出","5","来源","经典","题目","上传","张云聪","代码","提供","两份","一份","记忆","化","搜索","一份","DAG","最长","路标","准","套路","include","lt","bits","std","c++","h","gt","using","namespace","std","const","int","up","1000","5","struct","matrix","int","h","w","a","up","int","f","up","n","int","fi","int","x","if","f","x","return","f","x","for","int","j","1","j","lt","n","j","if","j","x","continue","else","if","a","x","w","gt","a","j","w","amp","amp","a","x","h","gt","a","j","h","a","x","h","gt","a","j","w","amp","amp","a","x","w","gt","a","j","h","f","x","max","f","x","fi","j","1","return","f","x","int","main","int","N","x","y","maxn","scanf","d","amp","N","while","N","scanf","d","amp","n","maxn","0","memset","f","0","sizeof","f","for","int","i","1","i","lt","n","i","scanf","d","d","amp","a","i","h","amp","a","i","w","for","int","i","1","i","lt","n","i","maxn","max","maxn","fi","i","printf","d","n","maxn","1","return","0","include","lt","bits","std","c++","h","gt","using","namespace","std","const","int","up","1000","5","struct","matrix","int","h","w","a","up","int","f","up","bool","cmp","const","matrix","amp","x","const","matrix","amp","y","return","x","h","lt","y","h","int","main","int","N","n","x","y","maxn","scanf","d","amp","N","while","N","scanf","d","amp","n","maxn","0","memset","f","0","sizeof","f","for","int","i","1","i","lt","n","i","scanf","d","d","amp","x","amp","y","if","x","gt","y","a","i","h","y","a","i","w","x","else","a","i","h","x","a","i","w","y","sort","a","1","a","n","1","cmp","for","int","i","2","i","lt","n","i","for","int","j","1","j","lt","i","j","if","a","i","w","gt","a","j","w","amp","amp","a","i","h","gt","a","j","h","f","i","max","f","i","f","j","1","for","int","i","1","i","lt","n","i","maxn","max","maxn","f","i","printf","d","n","maxn","1","return","0","2","硬币","问题","描写","n","硬币","面值","分别","V","1","V","2","Vn","每种","都","无穷","给定","非","负","整数","S","选用","硬币","面值","之和","恰好","S","输出","硬币","数目","最小值","最大值","输入","一行","两","个数","n","S","1","lt","n","lt","100","0","lt","S","lt","10000","接下来","n","行","每一种","硬币","面值","Vi","1","lt","Vi","lt","S","输出","两","行各","整数","一行","硬币","数目","最小值","行","硬币","数目","最大值","样例","输入","5","1012457","样例","输出","210","来源","ACM","常见","模型","DAG","最长","最","短路","看成","完全","背包","代码","include","lt","bits","std","c++","h","gt","using","namespace","std","const","int","up","1","10000","5","up","2","100","5","inf","0","x","3","f","3","f","3","f","3","f","int","f","up","1","g","up","1","int","V","up","2","int","main","int","n","S","maxn","scanf","d","d","amp","n","amp","S","for","int","i","1","i","lt","S","i","f","i","inf","g","i","inf","for","int","i","1","i","lt","n","i","scanf","d","amp","V","i","for","int","j","V","i","j","lt","S","j","f","j","min","f","j","f","j","V","i","1","g","j","max","g","j","g","j","V","i","1","printf","d","n","d","f","S","g","S","return","0","3","信任","链","题目","描写","现在","一排","人站","成","一列","玩","游戏","现在","告知","N","个人","编号","成","1","N","排成","一列","每个人","唯一","数字","P","俩","个人","A","B","B","P","A","编号","约数","B","编号","小于","A","那末","A","相信","B","现在","找出","最长的","信任","链","一系列","人","每个人","都","信任","前面","一个人","序列","不","连续","输入","格式","一行","1","个数","N","下面","一行","N","个数","表示","每个人","唯一","数字","P","输出","格式","输出","最长的","信任","链","长度","输入","样例","6","1","1","2","1","4","3","输出","样例","5","数据","范围","30%","N","lt","1000","100%","N","0","lt","P","lt","100","代码","include","lt","bits","std","c++","h","gt","using","namespace","std","int","f","100005","int","a","105","int","main","int","n","maxn","0","x","cin","gt","gt","n","for","int","i","1","i","lt","n","i","f","i","1","for","int","i","1","i","lt","n","i","scanf","d","amp","x","for","int","j","min","i","100","j","gt","1","j","if","i","j","0","f","i","max","f","i","a","j","1","a","x","max","a","x","f","i","maxn","max","maxn","f","i","printf","d","n","maxn","return","0","DAG","最","长","路","有一些","改变","首","先是","状态","转移","改变","策略","改变","数","状态","推出","最优","解时","只","需","考虑","同一","个数","中的","链","长的","小的","1","定","不是","最优","解","f","i","表示","i","尾","最长的","信任","链","那末","再","声明","a","p","表示","i","之前","值","p","最长","信任","链","长度"]},{"title":"轻（lan）松（ren）预编译法","url":"/posts/轻（lan）松（ren）预编译法.html","content":"本文实属博主无聊时，发现的一种行之有效的轻松写代码的方法：\n#include&lt;bits/stdc++.h&gt;\n#define res(s,n) scanf(\"%\"s,&amp;n)\n#define rep(s,n) printf(\"%\"s\"\\n\",n)\n#define ref(i,m,n) for(int i=m;i&lt;=n;i++)\n#define mfile(s) freopen(s\".in\",\"r\",stdin),freopen(s\".out\",\"w\",stdout)\n#define lnt long long\nusing namespace std;\n\nint main()\n{\n    lnt n;\n    res(\"lld\",n);\n    ref(i,1,n) rep(\"lld\",n);\n    return 0;\n}\n\n\n看到上方这份代码，相信每个OIer都可以知道我这份代码的玄（tou）妙（lan）之处。\n","title_tokenize":["轻","lan","松","ren","预编","译","法"],"content_tokenize":["本文","实属","博主","无聊","时","发现","一种","行之有效","轻松","写","代码","方法","include","lt","bits","std","c++","h","gt","define","res","s","n","scanf","s","amp","n","define","rep","s","n","printf","s","n","n","define","ref","i","m","n","for","int","i","m","i","lt","n","i","define","mfile","s","freopen","s","in","r","stdin","freopen","s","out","w","stdout","define","lnt","long","long","using","namespace","std","int","main","lnt","n","res","lld","n","ref","i","1","n","rep","lld","n","return","0","看到","上方","份","代码","相信","每一个","OIer","都","知道","份","代码","玄","tou","妙","lan","处"]},{"title":"动态规划专练（二）","url":"/posts/动态规划专练（二）.html","content":"1.数字三角形（一维数组）描述示出了一个数字三角形。 请编一个程序计算从顶至底的某处的一条路径，使该路径所经过的数字的总和最大。每一步可沿左斜线向下或右斜线向下走；1&lt;三角形行数&lt;25；三角形中的数字为整数&lt;1000；\n输入格式第一行为N，表示有N行后面N行表示三角形每条路的路径权\n输出格式路径所经过的数字的总和最大的答案\n测试样例输入 5 7 3 8 8 1 0 2 7 4 4 4 5 2 6 5\n输出 30\n备注搜索80，记忆化AC。\n代码：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int up=30;\n\nint main() \n{\n    int a[up],f[up],n,ans=-1;\n    memset(a,0,sizeof a);\n    memset(f,0,sizeof f);\n\n    cin&gt;&gt;n;\n    for(int i=1;i&lt;=n;i++)\n    {\n        for(int j=1;j&lt;=i;j++) cin&gt;&gt;a[j];\n        for(int j=i;j&gt;=1;j--) f[j]=max(f[j],f[j-1])+a[j];\n    }\n\n    for(int i=1;i&lt;=n;i++) ans=max(ans,f[i]);\n    cout&lt;&lt;ans&lt;&lt;endl;\n\n    return 0;\n}\n\n\n2.三取方格数背景JerryZhou同学经常改编习题给自己做。\n这天，他又改编了一题。。。。。\n描述设有N*N的方格图，我们将其中的某些方格填入正整数，而其他的方格中放入0。\n某人从图得左上角出发，可以向下走，也可以向右走，直到到达右下角。\n在走过的路上，他取走了方格中的数。（取走后方格中数字变为0）此人从左上角到右下角共走3次，试找出3条路径，使得取得的数总和最大。\n格式输入格式第一行:N (4&lt;=N&lt;=20)接下来一个N*N的矩阵，矩阵中每个元素不超过80，不小于0\n输出格式一行，表示最大的总和。\n测试样例样例输入41 2 3 42 1 3 41 2 3 41 3 2 4\n样例输出39\n限制各个测试点1s\n提示多进程DP\n代码：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int up=20 +5;\n\nint n,a[up][up],f[2*up][up][up][up];\n\nint main()\n{\n    scanf(\"%d\",&amp;n);\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=n;j++)\n            scanf(\"%d\",&amp;a[i][j]);\n    f[1][1][1][1]=a[1][1];\n\n    for(int s=2;s&lt;=2*n-1;s++)\n        for(int x1=max(1,s-n+1);x1&lt;=min(n,s);x1++)\n            for(int x2=max(1,s-n+1);x2&lt;=min(n,s);x2++)\n                for(int x3=max(1,s-n+1);x3&lt;=min(n,s);x3++)\n                {\n                    //s=x+y-1\n                    int mid=a[x1][s-x1+1]+a[x2][s-x2+1]+a[x3][s-x3+1];\n                    if(x1==x2) mid-=a[x1][s-x1+1];\n                    if(x1==x3) mid-=a[x1][s-x1+1];\n                    if(x2==x3) mid-=a[x2][s-x2+1];\n                    if(x1==x2 &amp;&amp; x2==x3) mid+=a[x1][s-x1+1];//容斥原理\n                    f[s][x1][x2][x3]=max(f[s-1][x1][x2][x3],max(f[s-1][x1][x2][x3-1],max(f[s-1][x1][x2-1][x3],max(f[s-1][x1][x2-1][x3-1],max(f[s-1][x1-1][x2][x3],max(f[s-1][x1-1][x2][x3-1],max(f[s-1][x1-1][x2-1][x3],f[s-1][x1-1][x2-1][x3-1])))))));\n                    f[s][x1][x2][x3]+=mid;\n                }\n\n    printf(\"%d\",f[2*n-1][n][n][n]);\n\n    return 0;\n}\n\n注：\n思路与传纸条和方格取数相似，但由于数组维数过高（6维）无法直接声明，所以只能压缩维度。通过分析，可以发现y坐标直接与x坐标相关，可以通过步数算出y坐标，同理，x坐标也可以被y坐标算出，这里姑且使用x坐标作为另外三个维度。\n循环的时候x从1到n，用x=max(1,s-n+1)，其中1是防止x越界，s-n+1是防止y越界；因为s=x+y-1，所以y=s-x+1&lt;=n，s-n+1&lt;=x，用x&lt;=min(n,s)是防止x越界。\n另外，分享一份网络流的题解（wang_yanheng）：\n\n把MAX_CAPACITY改成任意正整数k，即可实现k取方格数主要思路就是拆点构图。把每个点 x 拆成 x1, x2，x1与x2之间有：\n\n一条容量为1，价值为x权值的边\n一条容量为MAX_CAPACITY，价值为0的边\n\n假设y, z分别为 x 右侧、下方的点，把 x2 与 y1、x2 与 z1 各连一条边，容量为MAX_CAPACITY，价值为0最后加上源点与汇点，最大费用流即可。我使用了SPFA寻找最长价值的路径。\n解释一下变量含义：\n\nedge类型中，next指向的是同一起点的下一条边在E中的位置\nE是边集，size 是 E 的大小\nheadIndex[i] 指向的是起点为 i 的头一条边在E中的位置\nused, dist, queue, prev 用于最长路算法，其中 prev[i] 记录最长路中通往点 i 的边在E中的位置\n\n\n#include &lt;bits/stdc++.h>\n#define NIL -1\n#define MAX_CAPACITY 3\n#define INF 10000000\n#define MIN(a,b) ((a)&lt;(b)?(a):(b))\nusing namespace std;\n\ntypedef struct{\n    int next;\n    int from, to, value, f;\n} edge;\n\nedge E[5000];\nint headIndex[1000];\nint size = 0;\n\nshort used[1000];\nint queue[10000];\nint dist[1000];\nint prev[1000];\n\nvoid addEdge1(int from, int to, int value, int capacity);\nvoid addEdge(int from, int to, int value, int capacity);\nint maxPath(int source, int sink, int numV);\nint maxValueFlow(int source, int sink, int numV);\n\nint main(){\n    int n, numV;\n    int x, y, source, sink, value;\n\n    scanf(\"%d\", &amp;n);\n\n    /*initialize*/\n    for(x=0; x&lt;1000; x++)\n        headIndex[x] = NIL;\n\n    /*build the network*/\n    numV = 0;\n    for(x=0; x&lt;n; x++){\n        for(y=0; y&lt;n; y++){\n            scanf(\"%d\", &amp;value);\n            addEdge(numV, numV+1, value, 1);  //connect numV &amp; numV+1\n            addEdge(numV, numV+1, 0, MAX_CAPACITY);\n            if(x &lt; n-1)\n                addEdge(numV+1, numV+2*n, 0, MAX_CAPACITY);  //connnect numV+1 &amp; its downer neighbour, if exists\n            if(y &lt; n-1)\n                addEdge(numV+1, numV+2, 0, MAX_CAPACITY);  //connnect numV+1 &amp; its righter neighbour, if exists\n            numV += 2;\n        }\n    }\n    source = numV, sink = numV+1;\n    addEdge(source, 0, 0, MAX_CAPACITY);  //source\n    addEdge(numV-1, sink, 0, MAX_CAPACITY);  //sink\n\n    /*solve*/\n    printf(\"%d\\n\", maxValueFlow(source, sink, numV+2));\n    return 0;\n}\nvoid addEdge1(int from, int to, int value, int capacity){\n    E[size].from = from;\n    E[size].to = to;\n    E[size].value = value;\n    E[size].f = capacity;\n    E[size].next = headIndex[from];\n    headIndex[from] = size;\n    size++;\n}\nvoid addEdge(int from, int to, int value, int capacity){\n    addEdge1(from, to, value, capacity);\n    addEdge1(to, from, -value, 0);\n}\nint maxPath(int source, int sink, int numV){\n    int i, head = 0, tail = 0;\n    for(i=0; i&lt;numV; i++){\n        used[i] = 0;\n        prev[i] = NIL;\n        dist[i] = -INF;\n    }\n    dist[source] = 0;\n    queue[tail++] = source;\n    while(head &lt; tail){\n        source = queue[head];\n        used[source] = 0;\n        i = headIndex[source];\n        while(i != NIL){\n            if(E[i].f > 0 &amp;&amp; dist[E[i].to] &lt; dist[source] + E[i].value){\n                dist[E[i].to] = dist[source] + E[i].value;\n                prev[E[i].to] = i;\n                if(!used[E[i].to]){\n                    queue[tail++] = E[i].to;\n                    used[E[i].to] = 1;\n                }\n            }\n            i = E[i].next;\n        }\n        head++;\n    }\n    return dist[sink];\n}\nint maxValueFlow(int source, int sink, int numV){\n    int path, v, augment, value, ret = 0;\n    while((value = maxPath(source, sink, numV)) > 0){\n        augment = INF;\n        for(v=sink; v!=source; ){\n            path = prev[v];\n            augment = MIN(augment, E[path].f);\n            v = E[path].from;\n        }\n        for(v=sink; v!=source; ){\n            path = prev[v];\n            E[path].f -= augment;\n            E[path^1].f += augment;\n            v = E[path].from;\n        }\n        ret += value*augment;\n    }\n    return ret;\n}\n\n","title_tokenize":["动态","计划","专","练","2"],"content_tokenize":["1","数字","三角形","1","维","数组","描写","示","出","数字","三角形","请","编","程序","计算","顶","底","某处","一条","路径","使","路径","数字","总和","最大","每一步","左","斜线","向下","右","斜线","向下","走","1","lt","三角形","行数","lt","25","三角形","中","数字","整数","lt","1000","输入","格式","第一","行动","N","表示","N","行","后面","N","行","表示","三角形","条","路","路径","权","输出","格式","路径","数字","总和","最大","答案","测试","样例","输入","5","7","3","8","8","1","0","2","7","4","4","4","5","2","6","5","输出","30","备注","搜索","80","记忆","化","AC","代码","include","lt","bits","std","c++","h","gt","using","namespace","std","const","int","up","30","int","main","int","a","up","f","up","n","ans","1","memset","a","0","sizeof","a","memset","f","0","sizeof","f","cin","gt","gt","n","for","int","i","1","i","lt","n","i","for","int","j","1","j","lt","i","j","cin","gt","gt","a","j","for","int","j","i","j","gt","1","j","f","j","max","f","j","f","j","1","a","j","for","int","i","1","i","lt","n","i","ans","max","ans","f","i","cout","lt","lt","ans","lt","lt","endl","return","0","2.三","取","方格","数","背景","JerryZhou","同学","常常","改编","习题","做","这天","改编","1","题","描写","设有","N","N","方格","图","中的","方格","填入","正整数","方格","中","放入","0","某人","图","左上角","动身","向下","走","向右","走","直到","到达","右下角","走","路上","取","走了","方格","中的","数","取走","后","方格","中","数字","变成","0","这人","左上角","右下角","共","走","3次","试","找出","3条","路径","取得","数","总和","最大","格式","输入","格式","一行","N","4","lt","N","lt","20","接下来","N","N","矩阵","矩阵","中","每一个","元素","不超过","80","不","小于","0","输出","格式","一行","表示","最大","总和","测试","样例样例","输入","41","2","3","42","1","3","41","2","3","41","3","2","4","样例","输出","39","限制","测试","点","1","s","提示","进程","DP","代码","include","lt","bits","std","c++","h","gt","using","namespace","std","const","int","up","20","5","int","n","a","up","up","f","2","up","up","up","up","int","main","scanf","d","amp","n","for","int","i","1","i","lt","n","i","for","int","j","1","j","lt","n","j","scanf","d","amp","a","i","j","f","1","1","1","1","a","1","1","for","int","s","2","s","lt","2","n","1","s","for","int","x","1","max","1","s","n","1","x","1","lt","min","n","s","x","1","for","int","x","2","max","1","s","n","1","x","2","lt","min","n","s","x","2","for","int","x","3","max","1","s","n","1","x","3","lt","min","n","s","x","3","s","x","y","1","int","mid","a","x","1","s","x","1","1","a","x","2","s","x","2","1","a","x","3","s","x","3","1","if","x","1","x","2","mid","a","x","1","s","x","1","1","if","x","1","x","3","mid","a","x","1","s","x","1","1","if","x","2","x","3","mid","a","x","2","s","x","2","1","if","x","1","x","2","amp","amp","x","2","x","3","mid","a","x","1","s","x","1","1","容斥","原理","f","s","x","1","x","2","x","3","max","f","s","1","x","1","x","2","x","3","max","f","s","1","x","1","x","2","x","3","1","max","f","s","1","x","1","x","2","1","x","3","max","f","s","1","x","1","x","2","1","x","3","1","max","f","s","1","x","1","1","x","2","x","3","max","f","s","1","x","1","1","x","2","x","3","1","max","f","s","1","x","1","1","x","2","1","x","3","f","s","1","x","1","1","x","2","1","x","3","1","f","s","x","1","x","2","x","3","mid","printf","d","f","2","n","1","n","n","n","return","0","注","思路","传","纸条","方格","取","数","类似","数组","维","数","太高","6","维","没法","直接","声明","只能","紧缩","维度","分析","发现","y","坐标","直接","x","坐标","相干","步","数","算","出","y","坐标","同理","x","坐标","y","坐标","算","出","姑且","使用","x","坐标","三个","维度","循环","x","1","n","x","max","1","s","n","1","中","1","避免","x","越界","s","n","1","避免","y","越界","s","x","y","1","y","s","x","1","lt","n","s","n","1","lt","x","x","lt","min","n","s","避免","x","越界","分享","一份","网络","流","题解","wang","yanheng","MAX","CAPACITY","改成","任意","正","整数","k","即可","实现","k","取","方格","数","主要","思路","拆","点","构图","每一个","点","x","拆","成","x","1","x","2","x","1","x","2","之间","一条","容量","1","价值","x","权值","一条","容量","MAX","CAPACITY","价值","0","假定","y","z","分","x","右侧","下方","点","x","2","y","1","x","2","z","1","一条","容量","MAX","CAPACITY","价值","0","最后","加上","源点","汇","点","最大","费用","流","即可","使用","SPFA","寻觅","最长","价值","路径","解释一下","变量","含义","edge","类型","中","next","指向","同一","出发点","下","一条","E","中的","位置","E","边集","size","E","大小","headIndex","i","指向","出发点","i","头","一条","E","中的","位置","used","dist","queue","prev","用于","最长","路","算法","中","prev","i","记录","最长","路","中","通往","点","i","E","中的","位置","include","lt","bits","std","c++","h","define","NIL","1","define","MAX","CAPACITY","3","define","INF","10000000","define","MIN","a","b","a","lt","b","a","b","using","namespace","std","typedef","struct","int","next","int","from","to","value","f","edge","edge","E","5000","int","headIndex","1000","int","size","0","short","used","1000","int","queue","10000","int","dist","1000","int","prev","1000","void","addEdge","1","int","from","int","to","int","value","int","capacity","void","addEdge","int","from","int","to","int","value","int","capacity","int","maxPath","int","source","int","sink","int","numV","int","maxValueFlow","int","source","int","sink","int","numV","int","main","int","n","numV","int","x","y","source","sink","value","scanf","d","amp","n","initialize","for","x","0","x","lt","1000","x","headIndex","x","NIL","build","the","network","numV","0","for","x","0","x","lt","n","x","for","y","0","y","lt","n","y","scanf","d","amp","value","addEdge","numV","numV","1","value","1","connect","numV","amp","numV","1","addEdge","numV","numV","1","0","MAX","CAPACITY","if","x","lt","n","1","addEdge","numV","1","numV","2","n","0","MAX","CAPACITY","connnect","numV","1","amp","its","downer","neighbour","if","exists","if","y","lt","n","1","addEdge","numV","1","numV","2","0","MAX","CAPACITY","connnect","numV","1","amp","its","righter","neighbour","if","exists","numV","2","source","numV","sink","numV","1","addEdge","source","0","0","MAX","CAPACITY","source","addEdge","numV","1","sink","0","MAX","CAPACITY","sink","solve","printf","d","n","maxValueFlow","source","sink","numV","2","return","0","void","addEdge","1","int","from","int","to","int","value","int","capacity","E","size","from","from","E","size","to","to","E","size","value","value","E","size","f","capacity","E","size","next","headIndex","from","headIndex","from","size","size","void","addEdge","int","from","int","to","int","value","int","capacity","addEdge","1","from","to","value","capacity","addEdge","1","to","from","value","0","int","maxPath","int","source","int","sink","int","numV","int","i","head","0","tail","0","for","i","0","i","lt","numV","i","used","i","0","prev","i","NIL","dist","i","INF","dist","source","0","queue","tail","source","while","head","lt","tail","source","queue","head","used","source","0","i","headIndex","source","while","i","NIL","if","E","i","f","0","amp","amp","dist","E","i","to","lt","dist","source","E","i","value","dist","E","i","to","dist","source","E","i","value","prev","E","i","to","i","if","used","E","i","to","queue","tail","E","i","to","used","E","i","to","1","i","E","i","next","head","return","dist","sink","int","maxValueFlow","int","source","int","sink","int","numV","int","path","v","augment","value","ret","0","while","value","maxPath","source","sink","numV","0","augment","INF","for","v","sink","v","source","path","prev","v","augment","MIN","augment","E","path","f","v","E","path","from","for","v","sink","v","source","path","prev","v","E","path","f","augment","E","path","1","f","augment","v","E","path","from","ret","value","augment","return","ret"]},{"title":"%I64d & %lld: 64位整数全解","url":"/posts/I64d-and-lld.html","content":"64位整形引起的混乱主要在两方面，一是数据类型的声明，二是输入输出。首先是列举出下表的总结：\n变量定义输出方式gcc(mingw32)g++(mingw32)gcc(linux i386)g++(linux i386)MicrosoftVisual C++ 6.0long long“%lld”错误错误正确正确无法编译long long“%I64d”正确正确错误错误无法编译int64“lld”错误错误无法编译无法编译错误int64“%I64d”正确正确无法编译无法编译正确long longcout非C++正确非C++正确无法编译__int64cout非C++正确非C++无法编译无法编译\n\n可以看出如果我们在自己机器上写程序的话，情况分类如下：\n(1) 在Windows下的VC6.0里面，声明数据类型的时候应该写作\n__int64 a;\n输入输出的时候用 %I64d\nscanf(”%I64d”,&amp;a);printf(”%I64d”,a);\n(2) 在linux下的gcc/g++里面，数据类型声明写作\nlong long a;\n输入输出时候用 %lld\n(3) 在Windows下的其它IDE里面，数据类型声明用上面两种均可\n输入输出用 %I64d\n================== 以下可无视 =========================\n以下是对这种混乱情况的解释，如无兴趣可以跳过\n首先要说的是，和Java等语言不同，C/C++本身并没有规定各数据类型的位数，只是限定了一个大小关系，也就是规定从所占的bit数来说，short &lt;= int &lt;= long &lt;= long long。至于具体哪种类型占用多少位，是由你所用的开发平台的编译器决定的。在现在的PC上一个通常的标准是，int和long同为32位，long long为64位。但是如果换到其它平台(如ARM)上，这个数字可能会有不同，类型所占的大小可以用sizeof()运算符查看。\nlong long是C99标准中新引进的数据类型，在古老的VC6.0中并没有这个类型，所以在VC6.0中用”long long”会发生编译错误。为了表示64位整数，VC6里采用的是微软自己搞出来的一个数据类型，叫做int64，所以如果你是在VC6.0下编译的话，应该用int64定义64位整型。新版的Visual Studio已经支持long long了。GCC是支持long long的，我们在win系统中使用的其它IDE如Dev-Cpp, Code::Blocks等等大多是采用的MinGW编译环境，它是与GCC兼容的，所以也支持long long（另外为了与MS兼容，也支持__int64）。如果是在纯的linux下，就只能使用long long了。\n关于使用printf的输入输出，这里就有一个更囧的情况。实际上只要记住，主要的区分在于操作系统：如果在Windows系统下，那么无论什么编译器，一律用%I64d；如果在Linux系统，一律用%lld。这是因为MS提供的msvcrt.dll库里使用的就是%I64d的方式，尽管Dev-Cpp等在语法上支持标准，但也不得不使用MS提供的dll库来完成IO，所以就造成了这种情况。\n==================== 无视至此 ===========================\n那么对OIer来说，最为关心的就是在各个OJ上交题应分别使用哪种方式了。\n其实方式只有有限的几种： 如果服务器是linux系统，那么定义用long long，IO用%lld。如果服务器是Windows系统，那么声明要针对编译器而定：如果用MS系列编译器，声明用__int64 [现在新版的Visual Studio也支持long long了] ；如果用MinGW环境，声明用long long，至于无论什么编译器，IO一律%I64d。\n下面把各大OJ情况列表如下：\n1.Vijos：Windows系统；\n2.COGS：Linux系统；\n3.洛谷：Linux系统；\n4.Tyvj：VJ已死，有事烧纸（Windows系统）；\n5.TOJ：Linux系统；\n\nZOJ : Linux系统；\nPOJ : Windows系统。\n\n\n//本文改自Zlei的博文。\n","title_tokenize":["I","64","d","lld","64位","整数","全","解"],"content_tokenize":["64位","整形","引发","混乱","主要","两方面","1","数据类型","声明","2","输入输出","首","先是","罗列","出","下","表","总结","变量","定义","输出","方式","gcc","mingw","32","g","mingw","32","gcc","linux","i","386","g","linux","i","386","MicrosoftVisual","C++","6.0","long","long","lld","毛病","毛病","正确","正确","没法","编译","long","long","I","64","d","正确","正确","毛病","毛病","没法","编译","int","64","lld","毛病","毛病","没法","编译","没法","编译","毛病","int","64","I","64","d","正确","正确","没法","编译","没法","编译","正确","long","longcout","非","C++","正","确非","C++","正确","没法","编译","int","64","cout","非","C++","正","确非","C++","没法","编译","没法","编译","看出","机器","上","写","程序","情况","分类","以下","1","Windows","下","VC","6.0","里面","声明","数据类型","应当","写作","int","64","a","输入输出","I","64","d","scanf","I","64","d","amp","a","printf","I","64","d","a","2","linux","下","gcc","g","里面","数据类型","声明","写作","long","long","a","输入输出","lld","3","Windows","下","IDE","里面","数据类型","声明","用上","面","两种","都可","输入输出","I","64","d","以下","忽视","以下","这类","混乱","情况","解释","无","兴趣","跳过","首","先","要说","Java","语言","不同","C","C++","本身","并没有","规定","数据类型","位数","限定","大小","关系","也就是","规定","占","bit","数","来讲","short","lt","int","lt","long","lt","long","long","具体","类型","占用","位","所用","开发","平台","编译器","决定","现在","PC","上一个","通常","标准","int","long","32位","long","long","64位","换","平台","ARM","上","数字","可能会","不同","类型","占","大小","sizeof","运算","符","查看","long","long","C","99","标准","中","新","引进","数据类型","古老的","VC","6.0","中","并没有","类型","VC","6.0","中用","long","long","会","产生","编译","毛病","表示","64位","整数","VC","6","里","采取","微软","弄","出来","数据类型","叫做","int","64","VC","6.0","下","编译","应","int","64","定义","64位","整型","新版","Visual","Studio","已","支持","long","long","GCC","支","持","long","long","win","系统","中","使用","IDE","Dev","Cpp","Code","Blocks","大多","采取","MinGW","编译","环境","它是","GCC","兼容","支持","long","long","MS","兼容","支","持","int","64","纯的","linux","下","只","使用","long","long","使用","printf","输入输出","更","囧","情况","实际上","记住","主要","辨别","在于","操作系统","Windows","系统","下","那末","编译器","一概","I","64","d","Linux","系统","一概","lld","这是","MS","提供","msvcrt","dll","库","里","使用","I","64","d","方式","Dev","Cpp","语法","上","支持","标准","不能不","使用","MS","提供","dll","库","完成","IO","造成","这种情况","忽视","至此","那末","OIer","来讲","最为","关心","OJ","上交","题","应分","使用","方式","其实","方式","有限","几种","服务器","linux","系统","那末","定义","long","long","IO","lld","服务器","Windows","系统","那末","声明","针对","编译器","定","MS","系列","编译器","声明","int","64","现在","新版","Visual","Studio","支","持","long","long","MinGW","环境","声明","long","long","编译","器","IO","一律%","I","64","d","下面","大","OJ","情况","列表","以下","1","Vijos","Windows","系统","2","COGS","Linux","系统","3","洛谷","Linux","系统","4","Tyvj","VJ","已","死","有事","烧纸","Windows","系统","5","TOJ","Linux","系统","ZOJ","Linux","系统","POJ","Windows","系统","本文","改","Zlei","博文"]},{"title":"Vijos P1095 约瑟夫问题10E100版","url":"/posts/Vijos-p1095-10E约瑟夫问题.html","content":"【描述】n个人排成一圈。从某个人开始，按顺时针方向依次编号。从编号为1的人开始顺时针“一二一”报数，报到2的人退出圈子。这样不断循环下去，圈子里的人将不断减少。由于人的个数是有限的，因此最终会剩下一个人。试问最后剩下的人最开始的编号。\n【格式】输入格式一个正整数n，表示人的个数。输入数据保证数字n不超过100位。\n输出格式一个正整数。它表示经过“一二一”报数后最后剩下的人的编号。\n【样例】样例输入9\n样例输出3\n【限制】各个测试点1s\n【提示】样例说明当n=9时，退出圈子的人的编号依次为：2 4 6 8 1 5 9 7最后剩下的人编号为3\n【来源】Matrix67 根据经典问题改编\n注：竟然又是他。。。大犇只做数学类型的题吗？\n【分析】题目分析：常见的约瑟夫问题，设f[i]为i个人中最后一个死的人，f[1]=0，f[i]=(f[i-1]+k)%i，但是由于n的位数过大，所以并不能直接递推；\n算法分析：可以使用k为2的约瑟夫问题一般性的规律：求出不大于i的最大的2的整数次幂，记为2^k，最后一个去死的人是2(i-2^k)+1，另外再加上高精度；\n数据分析：一百位的数据，显然需要高精度计算；\n代码分析：\n#include cstdio>\n#include cstring>\nusing namespace std;\n\nint bigger(int a[],int b[])\n{\n    if(a[0]!=b[0])\n        return a[0]>b[0];\n    int flag=999;\n    for(int i=a[0];i>=1;i--)\n         if(a[i]!=b[i])\n         {\n             flag=a[i]>b[i];\n             break;\n         }\n    if(flag==999)\n        return 0;\n    return flag;\n}\n\nint read(int a[])\n{\n    char c[1000];\n    scanf(\"%s\",c);\n    int n=1,len=strlen(c),k=1;\n    for(int i=0;ilen;i++)\n    {\n        if(k==10000)\n        {\n            k=1;\n            n++;\n        }\n        a[n]+=k*(c[len-i-1]-'0');\n        k*=10;\n    }\n    a[0]=n;\n} \n\nint addx(int a[],int b[],int c[])\n{\n    int len=a[0]>b[0]?a[0]:b[0];\n    for(int i=1;i=len;i++)\n    {\n        c[i]+=a[i]+b[i];\n        c[i+1]+=c[i]/10000;\n        c[i]%=10000;\n    }\n    len++;\n    while(c[len]==0&amp;&amp;len>1) len--;\n    c[0]=len;\n}\n\nint minusx(int a[],int b[],int c[])\n{\n    int len=a[0]; \n    for(int i=1;i=len;i++)\n    {\n        c[i]+=a[i]-b[i];\n        if(c[i]0)\n        {\n            c[i]+=10000;\n            c[i+1]-=1;\n        }    \n    }\n    while(c[len]==0&amp;&amp;len>1) len--;\n    c[0]=len;\n}\n\nvoid mult(int a[],int x)\n{\n    int len,temp,k=0;\n    for(int i=1;i=a[0]||k;i++)\n    {\n        temp=a[i]*x+k;\n        k=temp/10000;\n        a[i]=temp%10000;\n        len=i;\n    }\n    while(a[len]==0&amp;&amp;len>1) len--;\n    a[0]=len;\n}\n\nvoid output(int a[])\n{\n    printf(\"%d\",a[a[0]]);\n    for(int i=a[0]-1;i>=1;i--)\n        printf(\"%04d\",a[i]);\n}\n\nint main()\n{\n    int n[100]={0};\n    read(n);\n    int flag;\n    int temp[100],base[100]={1,1};\n    while(true)\n    {\n        flag=1;\n        base[1]--;\n        flag*=bigger(n,base);\n        base[1]++;\n        memcpy(temp,base,sizeof(temp));\n        mult(base,2);\n        flag*=bigger(base,n);\n        if(flag)\n        break;\n    } \n    int c[100]={0};\n    temp[1]--;\n    minusx(n,temp,c);\n    mult(c,2);\n    int m[100]={1,1};\n    memset(temp,0,sizeof(temp));\n    minusx(c,m,temp);\n    output(temp);\n    return 0;\n}\n\n高精度x低精度，每次乘完，比较一次n与上一行末尾的数、n与下一行开头的数的大小得到n在不在该行中，不在就继续乘如果在该行中，那么n就是该行第（n-上一行末尾的序号）个（高精度减法）然后2k-1 得到结果 （高精度减法，乘法）注：计算上一行末尾，即（2^n）-1时，直接在a[1] 减1即可。因为2的乘方末尾最小为2\n注：以上借用了chronix同学代码。\n\n","title_tokenize":["Vijos","P","1095","约瑟夫","问题","10","E","100","版"],"content_tokenize":["描写","n","个人","排成","一圈","人","顺时针方向","顺次","编号","编号","1","人","顺时针","一二","1","报数","报到","2","人","退出","圈子","不断","循环","下去","圈子","里","人","不断","减少","人","个数","有限","终究","会","剩下","一个人","试问","最后","剩下","人","最","编号","格式","输入","格式","正","整数","n","表示","人","个数","输入","数据","保证","数字","n","不超过","100位","输出","格式","正整数","表示","一二","1","报数","后","最后","剩下","人","编号","样例","样例","输入","9","样例","输出","3","限制","测试","点","1","s","提示","样例","说明","n","9时","退出","圈子","人","编号","顺次","2","4","6","8","1","5","9","7","最后","剩下","人","编号","3","来源","Matrix","67","经典","问题","改编","注","居然","大","犇","只","做","数","学","类型","题吗","分析","题目","分析","常见的","约瑟夫","问题","设","f","i","i","人中","最后","死","人","f","1","0","f","i","f","i","1","k","i","n","位数","过大","不能","直接","递","推","算法","分析","使用","k","2","约瑟夫","问题","一般性","规律","求出","不","大于","i","最大","2","整数","次","幂","记","2","k","最后","去","死","人","2","i","2","k","1","再加上","高","精度","数据","分析","一百位","数据","明显","需要","高","精度","计算","代码","分析","include","cstdio","include","cstring","using","namespace","std","int","bigger","int","a","int","b","if","a","0","b","0","return","a","0","b","0","int","flag","999","for","int","i","a","0","i","1","i","if","a","i","b","i","flag","a","i","b","i","break","if","flag","999","return","0","return","flag","int","read","int","a","char","c","1000","scanf","s","c","int","n","1","len","strlen","c","k","1","for","int","i","0","ilen","i","if","k","10000","k","1","n","a","n","k","c","len","i","1","0","k","10","a","0","n","int","addx","int","a","int","b","int","c","int","len","a","0","b","0","a","0","b","0","for","int","i","1","i","len","i","c","i","a","i","b","i","c","i","1","c","i","10000","c","i","10000","len","while","c","len","0","amp","amp","len","1","len","c","0","len","int","minusx","int","a","int","b","int","c","int","len","a","0","for","int","i","1","i","len","i","c","i","a","i","b","i","if","c","i","0","c","i","10000","c","i","1","1","while","c","len","0","amp","amp","len","1","len","c","0","len","void","mult","int","a","int","x","int","len","temp","k","0","for","int","i","1","i","a","0","k","i","temp","a","i","x","k","k","temp","10000","a","i","temp","10000","len","i","while","a","len","0","amp","amp","len","1","len","a","0","len","void","output","int","a","printf","d","a","a","0","for","int","i","a","0","1","i","1","i","printf","04","d","a","i","int","main","int","n","100","0","read","n","int","flag","int","temp","100","base","100","1","1","while","true","flag","1","base","1","flag","bigger","n","base","base","1","memcpy","temp","base","sizeof","temp","mult","base","2","flag","bigger","base","n","if","flag","break","int","c","100","0","temp","1","minusx","n","temp","c","mult","c","2","int","m","100","1","1","memset","temp","0","sizeof","temp","minusx","c","m","temp","output","temp","return","0","高","精度","x","低","精度","每次","完","比较","一次","n","上","一行","末尾","数","n","下","一行","开头","数","大小","得到","n","不在","该行","中","不在","继续","该行","中","那末","n","该行","n","上","一行","末尾","序号","高","精度","减法","2","k","1","高","精度","减法","乘法","注","计算","上","一行","末尾","2","n","1时","直接","a","1","减","1","即可","2","乘方","末尾","最小","2","注","以上","借用","chronix","同学","代码"]},{"title":"Vijos P1090 连续数之和","url":"/posts/Vijos-p1090-连续数之和.html","content":"【描述】有n个正整数排成一行。你的目的是要从中取出一个或连续的若干个数，使它们的和能够被k整除。\n例如，有6个正整数，它们依次为1、2、6、3、7、4。若k=3，则你可以取出1、2、6，或者2、6、3、7，也可以仅仅取出一个6或者3使你所取的数之和能被3整除。当然，满足要求的取法不止以上这4种。事实上，一共有7种取法满足要求。\n给定n和k，以及这n个数。你的任务就是确定，从这n个数中取出其中一个数或者若干连续的数使它们的和能被k整除有多少方法。由于取法可能很多，因此你只需要输出它mod 1234567的值即可。\n【格式】输入格式第一行有两个正整数，分别代表n和k。输入数据保证有n&lt;=500 000，k&lt;=100 000。\n以下n行每行一个正整数。这些正整数保证都不大于10 000。\n输出格式一个正整数。它应该是你的答案mod 1234567的结果。\n【样例】样例输入16 3126374\n样例输出17\n【限制】各个测试点1s\n【来源】Matrix67 根据经典问题改编\n注：Matrix67乃文科班的数学奇人，这是他的博客。\n【分析】题目分析：从这n个数中取出其中一个数或者若干连续的数使它们的和能被k整除有多少方法，方法应该很多，并且n的总类又非常多，所以需要想一想所有的加和之间的共同性；\n算法分析：思考后发现，因为对k求余，所以可以将每一次的总数取模，这样每一次的总数都被归了类，再通过加法原理统计每一个方法；\n数据分析：输入数据保证有n&lt;=500 000，k&lt;=100 000，这些正整数保证都不大于10 000，每一个数都不算特别大，正好应证了想法；\n代码分析：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n,k,tmp;\nunsigned long long sum=0,ans=0,f[100001];\n\nint main()\n{\n    scanf(\"%d%d\",&amp;n,&amp;k);\n    memset(f,0,sizeof(f));\n    for(int i=1;i&lt;=n;i++)\n    {\n        scanf(\"%d\",&amp;tmp);\n        sum+=tmp;\n        if(sum%k==0) ans++;\n        ans=(ans+f[sum%k])%1234567;\n        f[sum%k]++;\n    }\n    printf(\"%I64d\",ans);\n\n    return 0;\n}\n\n刚开始还在纠结如何将归类好的数据算出方法总数，后来发现每一个数出现时，就可以将所属分类的数加起来，这样每一次就是将已有的可能性加上出现这个数后所有的可能性。\n借用hsez_woixia1314同学的题解：\n\nSUM[i]是代表前i个数的和当(SUM[i]-SUM[j]) MOD k=0 这时[j+1,i]就是满足的一个区间 一个方案了而我们求的是(SUM[i]-SUM[j]) MOD k=0 这样的方案总个数我们又可以推出 上式等价于SUM[i] MOD k=SUM[j] MOD k所以我们就是求SUM[i] MOD k=SUM[j] MOD k 的方案个数了假设 sum[i],sum[j],..sum[k]（共bn个） 都是 MOD k 余数为k-1的sum那么从上面bn个sum中任意选取两个就能得出(SUM[i]-SUM[j]) MOD k=0那么在bn个sum中怎么配对呢（下面的sum[bn]表示上述bn个sum中的第n个sum）很简单 先是sum[b1]与sum[b2] sum[b3] …sumbn然后sum[b2]与sum[b3] sum[b4] …sumbn然后sum[b3]与sum[b4] sum[b5] …sumbn…………最后sum[bn-1]与sum[bn]　　　　　　　　 ( 1 个)方案总数=n-1+n-2+n-3+…+1=bn(bn-1) div 2（好像这是初中的知识吧？ 可是当时我看楼下的楼下的楼下….的题解 我一时竟然还不明白为什么）所以 当sum mod k的余数为k-1时有bn(bn-1) div 2个方案总数了就这样依次得出余数为k-1 k-2 k-3 …0的时候方案总数 再相加一下得出答案所以在读入一个数的时候就计算sum然后计算sum mod k 的余数而b[j]表示余数为j的sum个数 此时根据上面新得出的更新相应的b[j]这样在读入完毕之后就可以根据b[j]直接计算总方案数了特别值得注意的是！！！！计算余数为0的方案总数时候还要加上b[0]　　也就是b[0]*(b[0]-1) div 2+b[0]为什么？？ 因为余数为0的时候单独一个sum[i]就能成为一个方案了还有比如div 2可以用shr 1 这样可以加快速度呼呼(～ o ～)~zZ　　说得好累啊我自己都快被讲糊涂了 呵呵希望有不懂这道题目的人能看懂….这样就不算白忙了\n\n","title_tokenize":["Vijos","P","1090","连续","数","之和"],"content_tokenize":["描写","n","正整数","排成","一行","目的","从中","取出","连续","若干","个数","使","能够","k","整除","6个","正","整数","顺次","1","2","6","3","7","4","k","3","取出","1","2","6","2","6","3","7","仅仅","取出","6","3","使","取","数","之和","3","整除","满足","要求","取法","不止","以上","4种","事实上","一共","7种","取法","满足","要求","给定","n","k","n","个数","任务","肯定","n","个数","中","取出","1","个数","若干","连续","数","使","k","整除","方法","取法","可能","很多","只","需要","输出","mod","1234567","值","即可","格式","输入","格式","一行","两个","正整数","分别","代表","n","k","输入","数据","保证","n","lt","500","000","k","lt","100","000","以下","n","行","每行","正整数","正整数","保证","都","不","大于","10","000","输出","格式","正整数","应该是","答案","mod","1234567","样例","样例","输入","16","3126374","样例","输出","17","限制","测试","点","1","s","来源","Matrix","67","经典","问题","改编","注","Matrix","67","文科","班","数学","奇人","这是","博客","分析","题目","分析","n","个数","中","取出","1","个数","若干","连续","数","使","k","整除","方法","方法","应当","很多","n","总","类","非","常多","需要","想想","加","之间","共同性","算法","分析","思考","后","发现","k","求","余","每一次","总数","取","模","每一次","总数","都","类","再","加法","原理","统计","每一个","方法","数据","分析","输入","数据","保证","n","lt","500","000","k","lt","100","000","正整数","保证","都","不","大于","10","000","个数","都","不算","特别","大","正","好","应","证","想法","代码","分析","include","lt","bits","std","c++","h","gt","using","namespace","std","int","n","k","tmp","unsigned","long","long","sum","0","ans","0","f","100001","int","main","scanf","d","d","amp","n","amp","k","memset","f","0","sizeof","f","for","int","i","1","i","lt","n","i","scanf","d","amp","tmp","sum","tmp","if","sum","k","0","ans","ans","ans","f","sum","k","1234567","f","sum","k","printf","I","64","d","ans","return","0","刚开始","还","纠结","归类","好的","数据","算","出","方法","总数","后来","发现","个数","出","现时","所属","分类","数","加起来","每一次","已","可能性","加上","出现","数","后","可能性","借用","hsez","woixia","1314","同学","题解","SUM","i","代表","前","i","个数","SUM","i","SUM","j","MOD","k","0","这时候","j","1","i","满足","区间","方案","求","SUM","i","SUM","j","MOD","k","0","方案","总","个数","推出","上","式","等价","SUM","i","MOD","k","SUM","j","MOD","k","求","SUM","i","MOD","k","SUM","j","MOD","k","方案","个数","假定","sum","i","sum","j","sum","k","共","bn","都是","MOD","k","余数","k","1","sum","那末","上面","bn","sum","中","任意","选取","两个","得出","SUM","i","SUM","j","MOD","k","0","那末","bn","sum","中","配对","下面","sum","bn","表示","上述","bn","sum","中","n","sum","很","简单","先是","sum","b","1","sum","b","2","sum","b","3","sumbn","sum","b","2","sum","b","3","sum","b","4","sumbn","sum","b","3","sum","b","4","sum","b","5","sumbn","最后","sum","bn","1","sum","bn","1","方案","总数","n","1","n","2","n","3","1","bn","bn","1","div","2","好像","这是","初中","知识","当时","看","楼下","楼下","楼下","题解","一时","居然","还","不明白","sum","mod","k","余数","k","1","时有","bn","bn","1","div","2个","方案","总数","顺次","得出","余数","k","1","k","2","k","3","0","方案","总数","再","相加","一下","得出","答案","在读","入","1","个数","计算","sum","计算","sum","mod","k","余数","b","j","表示","余数","j","sum","个数","此时","上面","新","得出","更新","相应","b","j","在读","入","终了","以后","b","j","直接","计算","总","方案","数","特别","值得","注意的","计算","余数","0","方案","总数","还要","加上","b","0","也就是","b","0","b","0","1","div","2","b","0","余数","0","单独","sum","i","成为","方案","div","2","shr","1","加快","速度","呼呼","o","zZ","说得好","累啊","都","快","讲","糊涂了","呵呵","希望","不懂","这道","题目","人","看懂","不算","白忙"]},{"title":"动态规划专练（一）","url":"/posts/动态规划专练（一）.html","content":"1.数字三角形描述示出了一个数字三角形。 请编一个程序计算从顶至底的某处的一条路径，使该路径所经过的数字的总和最大。每一步可沿左斜线向下或右斜线向下走；1&lt;三角形行数&lt;25；三角形中的数字为整数&lt;1000；\n输入格式第一行为N，表示有N行后面N行表示三角形每条路的路径权\n输出格式路径所经过的数字的总和最大的答案\n测试样例1输入 5 7 3 8 8 1 0 2 7 4 4 4 5 2 6 5\n输出 30\n备注搜索80，记忆化AC。\n代码：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int up=30;\nvector ve[up];\nint f[up][up];\n\nint dfs(int x,int y)\n{\n    if(f[x][y]) return f[x][y];\n    return f[x][y]=ve[x][y]+max(dfs(x+1,y),dfs(x+1,y+1));\n}\n\nint main()\n{\n    //freopen(\"djs.in\",\"r\",stdin);\n    //freopen(\"djs.out\",\"w\",stdout);\n    int i=0,j=0,n,m;\n\n    cin&gt;&gt;n;\n    for(i=0;i&lt;n;i++)\n    for(j=0;j&lt;=i;j++)       \n    {           \n        cin&gt;&gt;m;\n        ve[i].push_back(m);\n        if(i==n-1) f[i][j]=m;\n    }\n    cout&lt;&lt;dfs(0,0)&lt;&lt;endl; \n\n    return 0;\n}\n\n\n2.方格取数题目描述设有N*N的方格图(N&lt;=9)，我们将其中的某些方格中填入正整数，而其他的方格中则放\n人数字0。如下图所示（见样例）：\nA 0  0  0  0  0  0  0  0 0  0 13  0  0  6  0  0 0  0  0  0  7  0  0  0 0  0  0 14  0  0  0  0 0 21  0  0  0  4  0  0 0  0 15  0  0  0  0  0 0 14  0  0  0  0  0  0 0  0  0  0  0  0  0  0    .                  B\n某人从图的左上角的A点出发，可以向下行走，也可以向右走，直到到达右下角的B\n点。在走过的路上，他可以取走方格中的数（取走后的方格中将变为数字0）。\n此人从A点到B点共走两次，试找出2条这样的路径，使得取得的数之和为最大。\n输入输出格式输入格式：\n输入的第一行为一个整数N（表示N*N的方格图），接下来的每行有三个整数，前两个\n表示位置，第三个数为该位置上所放的数。一行单独的0表示输入结束。\n输出格式：\n只需输出一个整数，表示2条路径上取得的最大的和。\n输入输出样例输入样例#1：82 3 132 6  63 5  74 4 145 2 215 6  46 3 157 2 140 0  0\n输出样例#1：67\n说明NOIP 2000 提高组第四题\n代码：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n;\nint a[10][10]= {0};\nint f[10][10][10][10]= {0};\n\nint main() \n{\n    cin&gt;&gt;n;\n    while(true) \n    {\n        int x,y,z;\n        cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;\n        if(x==0) break;\n        a[x][y]=z;\n    }\n    for(int i=1;i&lt;=n;i++) \n        for(int j=1;j&lt;=n;j++) \n            for(int k=1;k&lt;=n;k++) \n                for(int l=1;l&lt;=n;l++) \n                {\n                    f[i][j][k][l]=max(max(f[i-1][j][k-1][l],f[i-1][j][k][l-1]),max(f[i][j-1][k-1][l],f[i][j-1][k][l-1]))+a[i][j];\n                    if (i!=k &amp;&amp; j!=l) f[i][j][k][l]+=a[i][j];\n                }\n    cout&lt;&lt;f[n][n][n][n]&lt;&lt;endl;\n\n    return 0;\n}\n\n\n3.传纸条题目描述小渊和小轩是好朋友也是同班同学，他们在一起总有谈不完的话题。一次素质拓展活动中，班上同学安排做成一个m行n列的矩阵，而小渊和小轩被安排在矩阵对角线的两端，因此，他们就无法直接交谈了。幸运的是，他们可以通过传纸条来进行交流。纸条要经由许多同学传到对方手里，小渊坐在矩阵的左上角，坐标(1,1)，小轩坐在矩阵的右下角，坐标(m,n)。从小渊传到小轩的纸条只可以向下或者向右传递，从小轩传给小渊的纸条只可以向上或者向左传递。\n在活动进行中，小渊希望给小轩传递一张纸条，同时希望小轩给他回复。班里每个同学都可以帮他们传递，但只会帮他们一次，也就是说如果此人在小渊递给小轩纸条的时候帮忙，那么在小轩递给小渊的时候就不会再帮忙。反之亦然。\n还有一件事情需要注意，全班每个同学愿意帮忙的好感度有高有低（注意：小渊和小轩的好心程度没有定义，输入时用0表示），可以用一个0-100的自然数来表示，数越大表示越好心。小渊和小轩希望尽可能找好心程度高的同学来帮忙传纸条，即找到来回两条传递路径，使得这两条路径上同学的好心程度只和最大。现在，请你帮助小渊和小轩找到这样的两条路径。\n输入输出格式输入格式：\n输入文件message.in的第一行有2个用空格隔开的整数m和n，表示班里有m行n列（1&lt;=m,n&lt;=50）。\n接下来的m行是一个m*n的矩阵，矩阵中第i行j列的整数表示坐在第i行j列的学生的好心程度。每行的n个整数之间用空格隔开。\n输出格式：\n输出文件message.out共一行，包含一个整数，表示来回两条路上参与传递纸条的学生的好心程度之和的最大值。\n输入输出样例输入样例#1：3 30 3 92 8 55 7 0\n输出样例#1：34\n说明【限制】\n30%的数据满足：1&lt;=m,n&lt;=10\n100%的数据满足：1&lt;=m,n&lt;=50\nNOIP 2008提高组第三题\n代码：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int up=55;\nint ans[up][up],dis[up][up][up][up];\n\nint main()\n{\n    int n,m;\n    cin&gt;&gt;m&gt;&gt;n;\n    for(int i=1;i&lt;=m;i++)\n        for(int j=1;j&lt;=n;j++) cin&gt;&gt;ans[i][j];\n    for(int i=1;i&lt;=m;i++)\n        for(int j=1;j&lt;=n;j++)\n            for(int k=1;k&lt;=m;k++)\n                for(int l=1;l&lt;=n;l++)\n                {\n                    dis[i][j][k][l]=max(max(dis[i-1][j][k-1][l],dis[i-1][j][k][l-1]),max(dis[i][j-1][k-1][l],dis[i][j-1][k][l-1]))+ans[i][j];\n                    if(i!=k &amp;&amp; j!=l) dis[i][j][k][l]+=ans[k][l];\n                }\n    cout&lt;&lt;dis[m][n][m][n]&lt;&lt;endl;\n\n    return 0;\n}\n","title_tokenize":["动态","计划","专","练","1"],"content_tokenize":["1","数字","三角形","描写","示","出","数字","三角形","请","编","程序","计算","顶","底","某处","一条","路径","使","路径","数字","总和","最大","每一步","左","斜线","向下","右","斜线","向下","走","1","lt","三角形","行数","lt","25","三角形","中","数字","整数","lt","1000","输入","格式","第一","行动","N","表示","N","行","后面","N","行","表示","三角形","条","路","路径","权","输出","格式","路径","数字","总和","最大","答案","测试","样例","1","输入","5","7","3","8","8","1","0","2","7","4","4","4","5","2","6","5","输出","30","备注","搜索","80","记忆","化","AC","代码","include","lt","bits","std","c++","h","gt","using","namespace","std","const","int","up","30","vector","ve","up","int","f","up","up","int","dfs","int","x","int","y","if","f","x","y","return","f","x","y","return","f","x","y","ve","x","y","max","dfs","x","1","y","dfs","x","1","y","1","int","main","freopen","djs","in","r","stdin","freopen","djs","out","w","stdout","int","i","0","j","0","n","m","cin","gt","gt","n","for","i","0","i","lt","n","i","for","j","0","j","lt","i","j","cin","gt","gt","m","ve","i","push","back","m","if","i","n","1","f","i","j","m","cout","lt","lt","dfs","0","0","lt","lt","endl","return","0","2","方格","取","数","题目","描写","设有","N","N","方格","图","N","lt","9","中的","方格","中","填入","正整数","方格","中","放","人数","字","0","下图","示","见样例","A","0","0","0","0","0","0","0","0","0","0","13","0","0","6","0","0","0","0","0","0","7","0","0","0","0","0","0","14","0","0","0","0","0","21","0","0","0","4","0","0","0","0","15","0","0","0","0","0","0","14","0","0","0","0","0","0","0","0","0","0","0","0","0","0","B","某人","图","左上角","A","点","动身","向下","行走","向右","走","直到","到达","右下角","B","点","走","路上","取走","方格","中的","数","取走","后","方格","中将","变成","数字","0","这人","A","点","B","点","共","走","两次","试","找出","2条","路径","取得","数","之和","最大","输入输出","格式","输入","格式","输入","第一","行动","整数","N","表示","N","N","方格","图","接下来","每行","三个","整数","前","两个","表示","位置","第三","个数","位置","上","放","数","一行","单独","0","表示","输入","结束","输出","格式","只","需","输出","整数","表示","2条","路径","上","取得","最大","输入输出","样例","输入","样例","1","82","3","132","6","63","5","74","4","145","2","215","6","46","3","157","2","140","0","0","输出","样例","1","67","说明","NOIP","2000","提高","组","第四","题","代码","include","lt","bits","std","c++","h","gt","using","namespace","std","int","n","int","a","10","10","0","int","f","10","10","10","10","0","int","main","cin","gt","gt","n","while","true","int","x","y","z","cin","gt","gt","x","gt","gt","y","gt","gt","z","if","x","0","break","a","x","y","z","for","int","i","1","i","lt","n","i","for","int","j","1","j","lt","n","j","for","int","k","1","k","lt","n","k","for","int","l","1","l","lt","n","l","f","i","j","k","l","max","max","f","i","1","j","k","1","l","f","i","1","j","k","l","1","max","f","i","j","1","k","1","l","f","i","j","1","k","l","1","a","i","j","if","i","k","amp","amp","j","l","f","i","j","k","l","a","i","j","cout","lt","lt","f","n","n","n","n","lt","lt","endl","return","0","3","传","纸条","题目","描写","小","渊","小","轩","好朋友","也是","同班","同学","在一起","总","谈","不","完","话题","一次","素质","拓展","活动","中","班","上","同学","安排","做成","m","行","n","列","矩阵","小","渊","小","轩","安排","矩阵","对角线","两端","没法","直接","交谈","荣幸","传","纸条","进行","交换","纸条","同学","传到","对方","手里","小","渊","坐在","矩阵","左上角","坐标","1","1","小","轩","坐在","矩阵","右下角","坐标","m","n","从小","渊","传到","小","轩","纸条","只","向下","向右","传递","从小","轩","传给","小","渊","纸条","只","向上","向左","传递","活动","进行","中","小","渊","希望","小","轩","传递","一张","纸条","希望","小","轩","回复","班里","每一个","同学","都","帮","传递","只","会","帮","一次","这人","小","渊","递给","小","轩","纸条","帮忙","那末","小","轩","递给","小","渊","不会","再","帮忙","反之亦然","一件","事情","需要","注意","全班","每一个","同学","愿意","帮忙","好感度","高","低","注意","小","渊","小","轩","好心","程度","没有","定义","输入","时用","0","表示","0","100","自然数","表示","数","越","大","表示","越","好心","小","渊","小","轩","希望","尽可能","找","好心","程度","高的","同学","帮忙","传","纸条","找到","来回","两条","传递","路径","两条","路径","上","同学","好心","程度","只","最大","现在","请你","帮助","小","渊","小","轩","找到","两条","路径","输入输出","格式","输入","格式","输入","文件","message","in","一行","2个","空格","隔开","整数","m","n","表示","班","里","m","行","n","列","1","lt","m","n","lt","50","接下来","m","行","m","n","矩阵","矩阵","中","i","行","j","列","整数","表示","坐在","i","行","j","列","学生","好心","程度","每行","n","整数","之间","空格","隔开","输出","格式","输出","文件","message","out","共","一行","包括","整数","表示","来回","两条","路上","参与","传递","纸条","学生","好心","程度","之和","最大值","输入输出","样例","输入","样例","1","3","30","3","92","8","55","7","0","输出","样例","1","34","说明","限制","30%","数据","满足","1","lt","m","n","lt","10","100%","数据","满足","1","lt","m","n","lt","50","NOIP","2008","提高","组","第三","题","代码","include","lt","bits","std","c++","h","gt","using","namespace","std","const","int","up","55","int","ans","up","up","dis","up","up","up","up","int","main","int","n","m","cin","gt","gt","m","gt","gt","n","for","int","i","1","i","lt","m","i","for","int","j","1","j","lt","n","j","cin","gt","gt","ans","i","j","for","int","i","1","i","lt","m","i","for","int","j","1","j","lt","n","j","for","int","k","1","k","lt","m","k","for","int","l","1","l","lt","n","l","dis","i","j","k","l","max","max","dis","i","1","j","k","1","l","dis","i","1","j","k","l","1","max","dis","i","j","1","k","1","l","dis","i","j","1","k","l","1","ans","i","j","if","i","k","amp","amp","j","l","dis","i","j","k","l","ans","k","l","cout","lt","lt","dis","m","n","m","n","lt","lt","endl","return","0"]},{"title":"Vijos P1449 字符串还原","url":"/posts/Vijos-p1449-字符串还原.html","content":"【背景】小K是一位蔚蓝教主的崇拜者(Orz教主er)，有一天，他收到了一封匿名信，信告诉了小K由于他表现出色，得到了一次当面Orz教主的机会，但是要当面Orz教主可不那么容易，不是每个人都有资格Orz教主的。所以要破解下面一段密文才可以得到相关的信息，信中有提供加密的规则，但是小K觉得这个问题看似复杂，所以想请你帮忙。\n【描述】一个长度为n的由小写字母组成的字符串S1 S2 … Sn按如下方式加密成3种形式：\n1、将字符串翻转，即对于每一个1≤i≤n来说，Si Si 与Sn−i+1 Sn−i+1 对换。2、将字符串中每个字母变为其之后第k个字母，定义z之后的字母为a，其中0≤k≤6且为未知数。3、将字符串中每个字母变为其之前第k个字母，定义a之前的字母为z，k同2所述。\n例如字符串abcd按上面3种方式加密后，在k=1的情况下会依次变为：\n1、dcba；2、bcde；3、zabc。\n现给出信中按以上3种形式分别加密后的3个字符串（不一定按上述例子的顺序），要求还原原来的字符串，并输出告诉小K。\n【格式】输入格式输入的第1行为一个整数n，表示这个字符串的长度。\n下面3行每行3个长度为n的字符串，且保证符合题目要求。\n输出格式输出仅包括1行，为还原后的字符串。\n【样例】样例输入4zabcdcbabcde\n样例输出abcd\n【限制】对于10%的数据，输入给出加密字符串的顺序同题目中1、2、3的顺序。\n对于20%的数据，n≤5；对于40%的数据，n≤10；对于60%的数据，n≤255；对于100%的数据，n≤10000。\n时限1s\n【分析】题目分析：三个字符串各有差别，但一个前移一个后移有所联系，可以从此入手；\n算法分析：模拟；\n数据分析：数据不算太强；\n代码分析：\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\ninline int idx(char ch)\n{\n    return ch;\n}\n\nconst int up=10000 +10;\nchar str[4][up];\nint n;\n\nbool judge(char a, char b, char c)\n{\n    return ((2*idx(a)==idx(b)+idx(c))||(2*idx(a)==idx(b)+idx(c)+26)||(2*idx(a)==idx(b)+idx(c)-26));\n}\n\nbool check(int c)\n{\n    int a,b;\n    switch(c)\n    {\n        case 1:a=2;b=3;break;\n        case 2:a=1;b=3;break;\n        default:a=1;b=2;\n    }\n    for(int i=1;i&lt;=n;i++) if(!judge(str[c][n-i+1], str[a][i], str[b][i])) return false;\n    return true;\n}\n\nint main()\n{\n    int ans=0;\n\n    scanf(\"%d\",&amp;n);getchar();\n    for(int i=1;i&lt;=3;i++) scanf(\"%s\",str[i]+1);\n    for(int i=1;i&lt;=2;i++) if(check(i))\n    {\n        ans=i;\n        break;\n    }\n    if(!ans) ans=3;\n    for(int i=n;i&gt;=1;i--) printf(\"%c\",str[ans][i]);\n\n    return 0;\n}\n\n\n可以先实验前两个句子的可行性，然后选择正确的那个。\n","title_tokenize":["Vijos","P","1449","字符串","还原"],"content_tokenize":["背景","小","K","一位","湛蓝","教主","崇拜者","Orz","教主","er","一天","收到","一封","匿名信","信","告知","小","K","表现","出色","得到","一次","当面","Orz","教主","机会","当面","Orz","教主","可不","那末","容易","不是","每个人","都","资格","Orz","教主","破解","下面","一段","密","文才","得到","相干","信息","信","中","提供","加密","规则","小","K","觉得","这个问题","看似","复杂","想","请你","帮忙","描写","长度","n","小写","字母","组成","字符串","S","1","S","2","Sn","以下","方式","加密","成","3种","情势","1","字符串","翻转","每一个1","i","n","来讲","Si","Si","Sn","−","i","1","Sn","−","i","1","对换","2","字符串","中","每一个","字母","变成","以后","k","字母","定义","z","以后","字母","a","中","0","k","6","未知数","3","字符串","中","每一个","字母","变成","之前","k","字母","定义","a","之前","字母","z","k","2","述","字符串","abcd","按上","面","3种","方式","加密","后","k","1","情况","下","会","顺次","变成","1","dcba","2","bcde","3","zabc","现","给出","信","中","以上","3种","情势","分别","加密","后","3个","字符串","不一","定","按上","述","例子","顺序","要求","还原","原来","字符串","输出","告知","小","K","格式","输入","格式","输入","1","行动","整数","n","表示","字符串","长度","下面","3","行","每行","3个","长度","n","字符串","保证","符合","题目","要求","输出","格式","输出","仅","包括","1","行","还原","后","字符串","样例","样例","输入","4","zabcdcbabcde","样例","输出","abcd","限制","10%","数据","输入","给出","加密","字符串","顺序","题目","中","1","2","3","顺序","20%","数据","n","5","40%","数据","n","10","60%","数据","n","255","100%","数据","n","10000","时限","1","s","分析","题目","分析","三个","字符串","差别","前","移","后","移","有所","联系","从此","入手","算法","分析","摹拟","数据","分析","数据","不算","太","强","代码","分析","include","lt","bits","std","c++","h","gt","using","namespace","std","inline","int","idx","char","ch","return","ch","const","int","up","10000","10","char","str","4","up","int","n","bool","judge","char","a","char","b","char","c","return","2","idx","a","idx","b","idx","c","2","idx","a","idx","b","idx","c","26","2","idx","a","idx","b","idx","c","26","bool","check","int","c","int","a","b","switch","c","case","1","a","2","b","3","break","case","2","a","1","b","3","break","default","a","1","b","2","for","int","i","1","i","lt","n","i","if","judge","str","c","n","i","1","str","a","i","str","b","i","return","false","return","true","int","main","int","ans","0","scanf","d","amp","n","getchar","for","int","i","1","i","lt","3","i","scanf","s","str","i","1","for","int","i","1","i","lt","2","i","if","check","i","ans","i","break","if","ans","ans","3","for","int","i","n","i","gt","1","i","printf","c","str","ans","i","return","0","先","实验","前","两个","句子","可行性","选择","正确的"]},{"title":"Pre：从零开始的游戏人生（二）游戏画面绘图","url":"/posts/Pre：从零开始的游戏人生（二）游戏画面绘图.html","content":"2.1 基本屏幕绘图GDI（Graphics Device Interface）译为“图形设备接口”，是WIndows API 中相当重要的一个成员，它掌管了所有显像设备的图像显示及输出功能，而本文将会讲解GDI函数的使用及窗口黏贴图像的技巧，渐进式地学习如何绘制所需的游戏画面。\n2.1.1 坐标与DC&nbsp;\n","title_tokenize":["Pre","从零开始","游戏","人生","2","游戏","画面","绘图"],"content_tokenize":["2.1","基本","屏幕","绘图","GDI","Graphics","Device","Interface","译","图形","设备","接口","WIndows","API","中","相当","重要的","成员","掌管","所有","显像","设备","图象","显示","输出","功能","本文","将会","讲授","GDI","函数","使用","窗口","黏贴","图象","技能","渐进","式","学习","绘制","需","游戏","画面","2.1.1","坐标","DC","nbsp"]},{"title":"Pre：从零开始的游戏人生（一）Windows API 程序基础","url":"/posts/Pre：从零开始的游戏人生（一）Windows API 程序基础.html","content":"1.1 VC++与Windows API由于计算机游戏融合了大量声音，影像数据的运算处理，因此，流畅度是程序运行时相当重要的一个基本要求。\n为了达到这项要求，目前一般的大型游戏软件开发大多采用VC++（Visual C++）程序开发工具与Windows API（Application Program Interface）程序框架来编写，以提高运行效率。在VC++IDE中，编写Windows操作系统平台的窗口程序有两种不同的程序架构：一种是微软加入的MFC（Microsoft Foundation Class library）类函数库；另一种便是本文所述的Windows API。\n其实，Windows API开发并不易，但在游戏开发上却相当简单且具有较优越的运行性能。\n注：所以还是使用VS吧，code::blocks也行，反正都比VC++顺手。\n1.2 构建游戏设计的舞台1.2.1 建立程序项目如果是在VC++中，可以选择“新建”，然后选择“Win32 Application”，单击【OK】按钮。\n项目建立完成后，可以了解到项目中几个重要的文件：\n  canvas.cpp    主程序文件，其中包含整个项目的主程序WinMaincanvas.rc    资源文件，定义了整个项目所使用的资源StdAfx.h    标头文件，其中引用整个项目所需的头文件\n\n写完调试好之后，直接摁F5运行即可。\n1.2.2 程序架构说明上文中表格便是一个标准的Windows API的程序架构，主程序文件“canvas.cpp”由下表中的几个重要的函数构成。\n  函数名称说明WinMain主程序，程序起始点WndProc自定义函数，处理程序消息MyRegisterClass自定义函数，注册窗口类别InitInstance自定义函数，建立及显示窗口的初始化函数\n\n1.2.2.1 WinMain函数主程序，如同Console中的main()函数。\nint APIENTRY WinMain (HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)\n{\n    MSG msg;\n    MyRegisterClass (hInstance);\n\n    if (!InitInstance (hInstance, nCmdShow))\n    {\n        return FALSE;\n    }\n\n    while (GetMessage (&amp;msg, NULL, 0, 0))\n    {\n        TranslateMessage (&amp;msg);\n        DispatchMessage (&amp;msg);\n    }\n\n    return msg.wParam;\n}\n\n\n程序说明：\n(1)调用MyRegisterClass()函数，向系统注册窗口类别，输入参数“hInstance”是目前运行个体的对象代码。\n(2)调用InitInstance()函数，进行初始化操作。\n(3)通过此消息循环来获取消息，并进行必要的键盘消息转换，而后将控制权交给操作系统，由操作系统决定该由哪个程序的消息处理程序，这个循环使用下述的API函数4,5,6。\n(4)GetMessage()，获取程序消息。\n(5)TranslateMessage()，转换伪码及字符。\n(6)DispatchMessage()，将控制权交给系统，再由系统决定负责处理消息的程序。\n1.2.2.2 MyRegisterClass()函数在建立程序窗口的实体前，必须先定义一个窗口类别，其中包含所要建立窗口的相关信息。\nATOM MyRegisterClass (HINSTANCE hInstance)\n{\n    WNDCLASSEX wcex;\n\n    wcex.cbSize = sizeof(WNDCLASSEX);\n    wcex.style = CS_HREDRAW | CS_VREDRAW;\n    wcex.lpfnWndProc = (WNDPROC)WndProc;\n    wcex.cbClsExtra = 0;\n    wcex.cbWndExtra = 0;\n    wcex.hInstance = hInstance;\n    wcex.hIcon = NULL;\n    wcex.hCursor = NULL;\n    wcex.hCursor = LoadCursor(NULL, IDC_ARROW);\n    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);\n    wcex.lpszMenuName = NULL;\n    wcex.lpszClassName = \"canvas\";\n    wcex.hIconSm = NULL;\n\n    return RegisterClassEx(&amp;wcex);\n}\n\n\n程序说明：\n(1)声明一个窗口类别“WNDCLASSEX”和结构“wcex”。\n(2)定义“wcex”中的各项信息，其中设定消息处理函数（lpfnWndProc）为“WndProc”，类别名称（lpszClassName）为“canvas”。\n(3)调用RegisterClassEx()函数注册类别，返回一个“ATOM”形态的字符串，即为类别名称“canvas”。\n1.2.2.3 InitInstance()函数在这一初始函数中，按照前面所定义的窗口类别来建立并显示实际的程序窗口。\nBOOL InitInstance (HINSTANCE hInstance, int nCmdShow)\n{\n    HWND hWnd;\n\n    hInst = hInstance;\n\n    hWnd = CreateWindow(\"canvas\", \"A2's Ghost\", WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);\n\n    if(!hWnd)\n    {\n        return FALSE;\n    }\n\n    MoveWindow(hWnd, 10, 10, 600, 450, true);\n    ShowWindow(hWnd, nCmdShow);\n    UpdateWindow(hWnd);\n\n    return TRUE;\n}\n\n\n程序说明：\n(1)调用CreateWindow()函数来创建一个窗口对象，所输入的第一个参数就是窗口建立所依据的类别名称，也就是前面程序所定义的“canvas”。\n(2)设定窗口的显示位置及窗口大小，然后绘制在显示设备上，使用了下述API函数。\n(3)MoveWindow()，设定窗口显示的位置及窗口大小。\n(4)ShowWindow()，设定窗口显示时的状态。\n(5)UpdateWindow()，将窗口绘制在显示设备上。\n1.2.2.4 WndProc()函数前面设定的时候把WndProc定义为消息处理函数，也就是当某些外部消息发生时，会按照消息的类型来决定该如何进行处理，除此之外，WndProc也是一个回叫函数（CALLBACK）是属于Windows操作系统所调用的函数，而非程序本身调用的程序。\nLRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)\n{\n    PAINTSTRUCT ps;\n    HDC hdc;\n\n    switch (message)//(1)\n    {\n        case WM_PAINT://(2)\n            hdc = BeginPaint (hWnd, &amp;ps);\n            EndPaint (hWnd, &amp;ps);\n            break;\n        case WM_DESTROY://(3)\n            PostQuitMessage (0);\n            break;\n        default://(4)\n            return DefWindowProc (hWnd, message, wParam, lParam);\n    }\n\n    return 0;\n}\n\n\n程序说明：\n(1)判断消息类型。\n(2)处理窗口重绘消息。\n(3)处理窗口结束消息。\n(4)使用函数调用预设的系统函数处理程序本身不处理的消息。\n1.3 总结本文讨论了VC++在游戏开发上所具备的优点，并快速地浏览了API程序的基本框架，希望可以对观看此文的人有所帮助。\n","title_tokenize":["Pre","从零开始","游戏","人生","1","Windows","API","程序","基础"],"content_tokenize":["1.1","V","C++","Windows","API","计算机","游戏","融会","大量","声音","影象","数据","运算","处理","流畅","度","程序","运行","时","相当","重要的","基本","要求","到达","这项","要求","目前","一般的","大型","游戏软件","开发","大多","采取","V","C++","Visual","C++","程序","开发","工具","Windows","API","Application","Program","Interface","程序","框架","编写","提高","运行","效率","V","C++","IDE","中","编写","Windows","操作系统","平台","窗口","程序","两种","不同的","程序","架构","一种","微软","加入","MFC","Microsoft","Foundation","Class","library","类","函数库","另一种","便是","本文","述","Windows","API","其实","Windows","API","开发","不容易","游戏","开发","上","却","相当","简单","具有","优越的","运行","性能","注","使用","VS","code","blocks","行","反正","都","V","C++","顺手","1.2","构建","游戏","设计","舞台","1.2.1","建立","程序","项目","V","C++","中","选择","新建","选择","Win","32","Application","单击","OK","按钮","项目","建立","完成","后","了解到","项目","中","几个","重要的","文件","canvas","cpp","主程序","文件","包括","全部","项目","主程序","WinMaincanvas","rc","资源","文件","定义","全部","项目","使用","资源","StdAfx","h","标","头","文件","援用","全部","项目","需","头","文件","写完","调试","好","以后","直接","摁","F","5","运行","即可","1.2.2","程序","架构","说明","上","文中","表格","便是","标准","Windows","API","程序","架构","主程序","文件","canvas","cpp","下","表","中的","几个","重要的","函数","构成","函数","名称","说明","WinMain","主程序","程序","起始","点","WndProc","自定义","函数","处理","程序","消息","MyRegisterClass","自定义","函数","注册","窗口","种别","InitInstance","自定义","函数","建立","显示","窗口","初始化","函数","1.2.2.1","WinMain","函数","主程序","犹如","Console","中的","main","函数","int","APIENTRY","WinMain","HINSTANCE","hInstance","HINSTANCE","hPrevInstance","LPSTR","lpCmdLine","int","nCmdShow","MSG","msg","MyRegisterClass","hInstance","if","InitInstance","hInstance","nCmdShow","return","FALSE","while","GetMessage","amp","msg","NULL","0","0","TranslateMessage","amp","msg","DispatchMessage","amp","msg","return","msg","wParam","程序","说明","1","调用","MyRegisterClass","函数","系统","注册","窗口","种别","输入","参数","hInstance","目前","运行","个体","对象","代码","2","调用","InitInstance","函数","进行","初始化","操作","3","消息","循环","取得","消息","进行","必要的","键盘","消息","转换","而后","控制权","交给","操作系统","操作系统","决定","程序","消息","处理","程序","循环","使用","下述","API","函数","4","5","6","4","GetMessage","取得","程序","消息","5","TranslateMessage","转换","伪","码","字符","6","DispatchMessage","控制权","交给","系统","再","系统","决定","负责","处理","消息","程序","1.2.2.2","MyRegisterClass","函数","建立","程序","窗口","实体","前","必须","先","定义","窗口","种别","包括","建立","窗口","相干","信息","ATOM","MyRegisterClass","HINSTANCE","hInstance","WNDCLASSEX","wcex","wcex","cbSize","sizeof","WNDCLASSEX","wcex","style","CS","HREDRAW","CS","VREDRAW","wcex","lpfnWndProc","WNDPROC","WndProc","wcex","cbClsExtra","0","wcex","cbWndExtra","0","wcex","hInstance","hInstance","wcex","hIcon","NULL","wcex","hCursor","NULL","wcex","hCursor","LoadCursor","NULL","IDC","ARROW","wcex","hbrBackground","HBRUSH","COLOR","WINDOW","1","wcex","lpszMenuName","NULL","wcex","lpszClassName","canvas","wcex","hIconSm","NULL","return","RegisterClassEx","amp","wcex","程序","说明","1","声明","窗口","种别","WNDCLASSEX","结构","wcex","2","定义","wcex","中的","各项","信息","设定","消息","处理","函数","lpfnWndProc","WndProc","种别","名称","lpszClassName","canvas","3","调用","RegisterClassEx","函数","注册","种别","返回","ATOM","形态","字符串","种别","名称","canvas","1.2.2.3","InitInstance","函数","1","初始","函数","中","前面","定义","窗口","种别","建立","显示","实际","程序","窗口","BOOL","InitInstance","HINSTANCE","hInstance","int","nCmdShow","HWND","hWnd","hInst","hInstance","hWnd","CreateWindow","canvas","A","2","s","Ghost","WS","OVERLAPPEDWINDOW","CW","USEDEFAULT","0","CW","USEDEFAULT","0","NULL","NULL","hInstance","NULL","if","hWnd","return","FALSE","MoveWindow","hWnd","10","10","600","450","true","ShowWindow","hWnd","nCmdShow","UpdateWindow","hWnd","return","TRUE","程序","说明","1","调用","CreateWindow","函数","创建","窗口","对象","输入","参数","窗口","建立","种别","名称","也就是","前面","程序","定义","canvas","2","设定","窗口","显示","位置","窗口","大小","绘制","显示","设备","上","使用","下述","API","函数","3","MoveWindow","设定","窗口","显示","位置","窗口","大小","4","ShowWindow","设定","窗口","显示","时","状态","5","UpdateWindow","窗口","绘制","显示","设备","上","1.2.2.4","WndProc","函数","前面","设定","WndProc","定义","消息","处理","函数","也就是","外部","消息","产生","时","会","消息","类型","决定","进行","处理","WndProc","也是","回","函数","CALLBACK","属于","Windows","操作系统","调用","函数","非","程序","本身","调用","程序","LRESULT","CALLBACK","WndProc","HWND","hWnd","UINT","message","WPARAM","wParam","LPARAM","lParam","PAINTSTRUCT","ps","HDC","hdc","switch","message","1","case","WM","PAINT","2","hdc","BeginPaint","hWnd","amp","ps","EndPaint","hWnd","amp","ps","break","case","WM","DESTROY","3","PostQuitMessage","0","break","default","4","return","DefWindowProc","hWnd","message","wParam","lParam","return","0","程序","说明","1","判断","消息","类型","2","处理","窗口","重","绘","消息","3","处理","窗口","结束","消息","4","使用","函数","调用","预设","系统","函数","处理","程序","本身","不","处理","消息","1.3","总结","本文","讨论","V","C++","游戏","开发","上","具有","优点","快速地","浏览","API","程序","基本","框架","希望","观看","此文","人","有所","帮助"]},{"title":"COGS P1 A+B Problem","url":"/posts/COGS P1 A+B Problem.html","content":"【背景】现在有两个实数，分别是A和B。请你从文件中读取A和B，计算它们的和A+B，并把它输出到文件中。（保留到整数）\n【格式】输入格式第一行：一个实数A第二行：一个实数B\n输出格式第一行：一个整数C = A+B\n【样例】输入样例12\n输出样例3\n【分析】题目分析：第一感觉是太简单了，作为基础题也不应该这么平凡，仔细一看，发现有一些小改动，不好好读题的话就会出错，COGS无愧人气高；\n算法分析：直接模拟；\n数据分析：4个数据，比较水；\n代码分析：\n#include&lt;iostream&gt;\n#include&lt;cstdio&gt;\n#include&lt;cstring&gt;\n#include&lt;algorithm&gt;\nusing namespace std;\n\nint main()\n{\n    freopen(\"aplusb.in\",\"r\",stdin);\n    freopen(\"aplusb.out\",\"w\",stdout);\n\n    double a,b;\n    cin&gt;&gt;a&gt;&gt;b;\n    cout&lt;&lt;(int)(a+b)&lt;&lt;endl;\n\n    return 0;\n}\n\n\n没什么好分析的，他教会了我们必须好好读题干；\nalert(“My First JavaScript”);\nP.S.这道题只是一个报告模板。\n","title_tokenize":["COGS","P","1","A","B","Problem"],"content_tokenize":["背景","现在","两个","实数","分","A","B","请你","文件","中","读取","A","B","计算","A","B","并把","输出","文件","中","保存","整数","格式","输入","格式","一行","实数","A","行","实数","B","输出","格式","一行","整数","C","A","B","样例","输入","样例","12","输出","样例","3","分析","题目","分析","第一","感觉","太","简单了","基础","题","也不","应当","平凡","仔细","1","看","发现","有一些","小","改动","不","好好","读题","会","出错","COGS","无愧","人气","高","算法","分析","直接","摹拟","数据","分析","4个","数据","比较","水","代码","分析","include","lt","iostream","gt","include","lt","cstdio","gt","include","lt","cstring","gt","include","lt","algorithm","gt","using","namespace","std","int","main","freopen","aplusb","in","r","stdin","freopen","aplusb","out","w","stdout","double","a","b","cin","gt","gt","a","gt","gt","b","cout","lt","lt","int","a","b","lt","lt","endl","return","0","没什么","好","分析","教会","必须","好好","读题","干","alert","My","First","JavaScript","P","S","这道题","只","报告","模板"]},{"title":"Index","url":"/posts/index.html","content":"There is some strange thing.What is it?\nIt’s my blog.\n1-saber\n2-dalao\n3-who\n4-interesting\n&nbsp;\n","title_tokenize":["Index"],"content_tokenize":["There","is","some","strange","thing","What","is","it","It","s","my","blog","1","saber","2","dalao","3","who","4","interesting","nbsp"]}]